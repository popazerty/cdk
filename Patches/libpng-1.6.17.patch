--- libpng-1.6.10.orig/Makefile.am	2014-03-17 08:51:25.812005079 -0300
+++ libpng-1.6.10/Makefile.am	2014-03-17 09:14:28.807586433 -0300
@@ -10,7 +10,7 @@
 check_PROGRAMS= pngtest pngunknown pngstest pngvalid pngimage
 
 # Utilities - installed
-bin_PROGRAMS= pngfix png-fix-itxt
+bin_PROGRAMS=
 
 # This ensures that pnglibconf.h gets built at the start of 'make all' or
 # 'make check', but it does not add dependencies to the individual programs,
diff -Nura libpng-1.6.10.orig/Makefile.in libpng-1.6.10/Makefile.in
--- libpng-1.6.10.orig/Makefile.in	2014-03-17 08:51:25.807005070 -0300
+++ libpng-1.6.10/Makefile.in	2014-03-17 09:14:44.846617623 -0300
@@ -97,7 +97,7 @@
 host_triplet = @host@
 check_PROGRAMS = pngtest$(EXEEXT) pngunknown$(EXEEXT) \
 	pngstest$(EXEEXT) pngvalid$(EXEEXT) pngimage$(EXEEXT)
-bin_PROGRAMS = pngfix$(EXEEXT) png-fix-itxt$(EXEEXT)
+bin_PROGRAMS =
 @PNG_ARM_NEON_TRUE@am__append_1 = arm/arm_init.c\
 @PNG_ARM_NEON_TRUE@	arm/filter_neon.S arm/filter_neon_intrinsics.c
 
--- libpng-1.6.8/Makefile.am	2013-12-30 18:23:08.261797417 +0800
+++ libpng-1.6.8.bak/Makefile.am	2013-12-30 18:22:15.565795726 +0800
@@ -231,7 +231,7 @@
 # interfering with the symbol file format.
 SYMBOL_CFLAGS = -DPNGLIB_LIBNAME='PNG@PNGLIB_MAJOR@@PNGLIB_MINOR@_0'\
 		-DPNGLIB_VERSION='@PNGLIB_VERSION@'\
-		-DSYMBOL_PREFIX='$(SYMBOL_PREFIX)'\
+		-DSYMBOL_PREFIX=''\
 		-DPNG_NO_USE_READ_MACROS -DPNG_BUILDING_SYMBOL_TABLE
 
 if DO_PNG_PREFIX
--- libpng-1.6.8/Makefile.in	2013-12-30 18:23:08.261797417 +0800
+++ libpng-1.6.8.bak/Makefile.in	2013-12-30 18:22:09.853794547 +0800
@@ -747,7 +747,7 @@
 # interfering with the symbol file format.
 SYMBOL_CFLAGS = -DPNGLIB_LIBNAME='PNG@PNGLIB_MAJOR@@PNGLIB_MINOR@_0' \
 	-DPNGLIB_VERSION='@PNGLIB_VERSION@' \
-	-DSYMBOL_PREFIX='$(SYMBOL_PREFIX)' -DPNG_NO_USE_READ_MACROS \
+	-DSYMBOL_PREFIX='' -DPNG_NO_USE_READ_MACROS \
 	-DPNG_BUILDING_SYMBOL_TABLE $(am__append_5)
 
 # EXT_LIST is a list of the possibly library directory extensions, this exists
--- libpng-1.6.13/pngrtran.c.org
+++ libpng-1.6.13/pngrtran.c
@@ -4700,6 +4700,34 @@
  * and is very touchy.  If you add a transformation, take care to
  * decide how it fits in with the other transformations here.
  */
+
+void /* PRIVATE */
+png_do_remove_color_if_full_alpha(png_row_infop row_info, png_bytep row)
+{
+   png_uint_32 row_width;
+   png_debug(1, "in png_do_read_invert_alpha");
+   row_width = row_info->width;
+   if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
+   {
+      if (row_info->bit_depth == 8)
+      {
+         png_bytep sp = row + row_info->rowbytes;
+         png_bytep dp = sp;
+         png_uint_32 i;
+         float f;
+
+         for (i = 0; i < row_width; i++)
+         {
+               --dp;
+            f = ((png_byte)*(--sp))/255.0; //a
+            *(--dp) = ((png_byte)*(--sp))*f; //r
+            *(--dp) = ((png_byte)*(--sp))*f; //g
+            *(--dp) = ((png_byte)*(--sp))*f; //b
+         }
+      }
+   }
+}
+
 void /* PRIVATE */
 png_do_read_transformations(png_structrp png_ptr, png_row_infop row_info)
 {
@@ -4730,6 +4758,8 @@
       png_error(png_ptr, "Uninitialized row");
    }
 
+   png_do_remove_color_if_full_alpha(row_info, png_ptr->row_buf + 1);
+
 #ifdef PNG_READ_EXPAND_SUPPORTED
    if ((png_ptr->transformations & PNG_EXPAND) != 0)
    {

