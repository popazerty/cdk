diff -Naur '--exclude-from=diff-exclude' enigma2-nightly.org/lib/python/Plugins/Extensions/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/Makefile.am
--- enigma2-nightly/lib/python/Plugins/Extensions/Makefile.am	2014-03-25 21:34:35.256596942 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/Makefile.am	2014-03-26 02:23:54.227866921 +0100
@@ -10,6 +10,42 @@
 SUBDIRS += CuberevoVFD
 endif
 
+if ENABLE_FORTIS_HDBOX
+SUBDIRS += fs9000VFD
+endif
+
+if ENABLE_OCTAGON1008
+SUBDIRS += hs9510VFD
+endif
+
+if ENABLE_ATEVIO7500
+SUBDIRS += hs8200VFD
+endif
+
+if ENABLE_HS7110
+SUBDIRS += hs7110VFD
+endif
+
+if ENABLE_HS7810A
+SUBDIRS += hs7810aVFD
+endif
+
+if ENABLE_HS7119
+SUBDIRS += hs7810aVFD
+endif
+
+if ENABLE_HS7819
+SUBDIRS += hs7810aVFD
+endif
+
+if ENABLE_SPARK7162
+SUBDIRS += spark7162VFD
+endif
+ 
+if ENABLE_SPARK
+SUBDIRS += sparkVFD
+endif
+
 if HAVE_LIBDDVD
 SUBDIRS += DVDPlayer
 endif
--- /dev/null
+++ enigma2-nightly/lib/python/Plugins/Extensions/fs9000VFD/__init__.py	2012-03-08 20:35:00.000000000 +0100
@@ -0,0 +1,2 @@
+
+
--- /dev/null
+++ enigma2-nightly/lib/python/Plugins/Extensions/fs9000VFD/vfddisplay.png	2012-03-08 20:35:00.000000000 +0100
@@ -0,0 +1,2 @@
+
+
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/fs9000VFD/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/fs9000VFD/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/fs9000VFD/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/fs9000VFD/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,10 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/fs9000VFD
+
+SUBDIRS = locale meta
+
+install_PYTHON = \
+	__init__.py \
+	plugin.py
+
+dist_install_DATA = \
+	vfddisplay.png
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/fs9000VFD/plugin.py enigma2-nightly/lib/python/Plugins/Extensions/fs9000VFD/plugin.py
--- enigma2-nightly.org/lib/python/Plugins/Extensions/fs9000VFD/plugin.py	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/fs9000VFD/plugin.py	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,761 @@
+# -*- coding: utf-8 -*-
+from Plugins.Plugin import PluginDescriptor
+from ServiceReference import ServiceReference
+from Components.ServiceList import ServiceList
+from enigma import iPlayableService, iServiceInformation, iTimeshiftServicePtr, iRecordableService, eTimer, evfd, eDVBVolumecontrol, iFrontendInformation
+from time import localtime, strftime, sleep
+from Components.ServiceEventTracker import ServiceEventTracker
+from Components.Console import Console
+from Tools.Directories import fileExists, resolveFilename, SCOPE_LANGUAGE, SCOPE_PLUGINS
+from os import environ, statvfs
+from Components.ActionMap import ActionMap
+from Components.config import *
+from Components.ConfigList import ConfigList, ConfigListScreen
+from Components.Language import language
+from Components.Sources.StaticText import StaticText
+from Tools.HardwareInfo import HardwareInfo
+from Screens.Screen import Screen
+import gettext
+#Version 140406.1
+stb = HardwareInfo().get_device_name()
+lang = language.getLanguage()
+environ['LANGUAGE'] = lang[:2]
+gettext.bindtextdomain('enigma2', resolveFilename(SCOPE_LANGUAGE))
+gettext.textdomain('enigma2')
+gettext.bindtextdomain('VFD-Icons', '%s%s' % (resolveFilename(SCOPE_PLUGINS), 'SystemPlugins/VFD-Icons/locale/'))
+
+def _(txt):
+	t = gettext.dgettext('VFD-Icons', txt)
+	if t == txt:
+		t = gettext.gettext(txt)
+	return t
+
+def translateBlock(block):
+	for x in TranslationHelper:
+		if block.__contains__(x[0]):
+			block = block.replace(x[0], x[1])
+	return block
+
+try:
+	DisplayType = evfd.getInstance().getVfdType()
+	if DisplayType != 6:
+		DisplayType = None
+except:
+	DisplayType = None
+DisplayTypevfd = DisplayType
+
+if DisplayTypevfd is None:
+	if stb.lower() == 'hdbox' or stb.lower() == 'fortis':
+		DisplayType = 6
+	else:
+		DisplayType = None
+
+config.plugins.vfdicon = ConfigSubsection()
+config.plugins.vfdicon.displayshow = ConfigSelection(default = "channel",
+	choices = [
+		("nothing", _("blank")),
+		("channel number", _("channel number")),
+		("channel", _("channel name")),
+		("channel namenumber", _("channel number and name")),
+		("time", _("time")),
+		("date", _("date")),
+		("time_date", _("time and date")),
+		("day_date", _("day and date"))
+		])
+config.plugins.vfdicon.stbshow = ConfigSelection(default = "time_date",
+	choices = [
+		("nothing", _("nothing")),
+		("time", _("time")),
+		("date", _("date")),
+		("time_date", _("time and date")),
+		("day_date", _("day and date"))
+		])
+config.plugins.vfdicon.contrast = ConfigSlider(default=4, limits=(0, 7))
+config.plugins.vfdicon.stbcontrast = ConfigSlider(default=2, limits=(0, 7))
+config.plugins.vfdicon.uppercase = ConfigYesNo(default=False)
+config.plugins.vfdicon.textscroll = ConfigSelection(default = "1",
+	choices = [
+		("0", _("no")),
+		("1", _("once")),
+		("2", _("continuous"))
+		])
+config.plugins.vfdicon.textcenter = ConfigSelection(default = "0",
+	choices = [
+		("0", _("no")),
+		("1", _("yes"))
+		])
+config.plugins.vfdicon.showicons = ConfigSelection(default = "all",
+	choices = [
+		("none", _("none")),
+		("partial", _("partial")),
+		("all", _("all"))
+		])
+config.plugins.vfdicon.standbyredledon = ConfigSlider(default=7, limits=(0, 31))
+config.plugins.vfdicon.ledbright = ConfigSlider(default=15, limits=(0, 31))
+config.plugins.vfdicon.crossbright = ConfigSlider(default=31, limits=(0, 31))
+config.plugins.vfdicon.extMenu = ConfigYesNo(default=True)
+
+class ConfigVFDDisplay(Screen, ConfigListScreen):
+	def __init__(self, session):
+		self.icons_showicons = None
+		Screen.__init__(self, session)
+		self.skinName = ["Setup"]
+		self["key_red"] = StaticText(_("Cancel"))
+		self["key_green"] = StaticText(_("OK"))
+		self["actions"] = ActionMap(["OkCancelActions", "DirectionActions", "SetupActions", "ColorActions"],
+			{
+				'left': self.keyLeft,
+				'down': self.keyDown,
+				'up': self.keyUp,
+				'right': self.keyRight,
+				"cancel": self.cancel,
+				"ok": self.keySave,
+				"green": self.keySave,
+				"red": self.cancel,
+			}, -2)
+		self.cfglist = []
+		ConfigListScreen.__init__(self, self.cfglist, session = session)
+		self.setTitle(_("VFD display configuration"))
+		self.createSetup()
+
+	def createSetup(self):
+		self.cfglist = []
+		self.cfglist.append(getConfigListEntry(_("Show on VFD display"), config.plugins.vfdicon.displayshow))
+		self.cfglist.append(getConfigListEntry(_("Show on VFD display in standby"), config.plugins.vfdicon.stbshow))
+		if DisplayType == 6:
+			self.cfglist.append(getConfigListEntry(_("VFD brightness"), config.plugins.vfdicon.contrast))
+			self.cfglist.append(getConfigListEntry(_("Standby brightness"), config.plugins.vfdicon.stbcontrast))
+		self.cfglist.append(getConfigListEntry(_("Uppercase letters only"), config.plugins.vfdicon.uppercase))
+		self.cfglist.append(getConfigListEntry(_("Scroll text"), config.plugins.vfdicon.textscroll))
+		self.cfglist.append(getConfigListEntry(_("Center text"), config.plugins.vfdicon.textcenter))
+		self.cfglist.append(getConfigListEntry(_("Show icons"), config.plugins.vfdicon.showicons))
+		self.icons_showicons = config.plugins.vfdicon.showicons.value
+		if DisplayType == 6:
+			self.cfglist.append(getConfigListEntry(_('Stby LED brightness'), config.plugins.vfdicon.standbyredledon))
+			self.cfglist.append(getConfigListEntry(_('Blue LED brightness'), config.plugins.vfdicon.ledbright))
+			self.cfglist.append(getConfigListEntry(_('Cross brightness'), config.plugins.vfdicon.crossbright))
+	        self.cfglist.append(getConfigListEntry(_('Show this plugin in plugin menu'), config.plugins.vfdicon.extMenu))
+		self["config"].list = self.cfglist
+		self["config"].l.setList(self.cfglist)
+
+	def newConfig(self):
+		global DisplayType
+		if DisplayType == 6:
+			if self["config"].getCurrent()[1] == config.plugins.vfdicon.stbcontrast:
+				Console().ePopen("fp_control -b " + str(config.plugins.vfdicon.stbcontrast.value))
+			elif self["config"].getCurrent()[1] == config.plugins.vfdicon.standbyredledon:
+				Console().ePopen("fp_control -l 0 " + str(config.plugins.vfdicon.standbyredledon.value) + " -l 1 0 -l 4 0 -l 5 0 -l 6 0 -l 7 0")
+			else:
+				Console().ePopen("fp_control -b " + str(config.plugins.vfdicon.contrast.value))
+				print ""
+				b = str(config.plugins.vfdicon.ledbright.value)
+				c = str(config.plugins.vfdicon.crossbright.value)
+				Console().ePopen("fp_control -l 0 0 -l 1 " + b + " -l 4 " + c + " -l 5 " + c + " -l 6 " + c + " -l 7 " + c)
+		print "newConfig", self["config"].getCurrent()
+		self.createSetup()
+
+	def cancel(self):
+		main(self)
+		b = str(config.plugins.vfdicon.ledbright.value)
+		c = str(config.plugins.vfdicon.crossbright.value)
+		Console().ePopen("fp_control -l 0 0 -l 1 " + b + " -l 4 " + c + " -l 5 " + c + " -l 6 " + c + " -l 7 " + c)
+		ConfigListScreen.keyCancel(self)
+
+	def keySave(self):
+		global DisplayType
+		if DisplayType == 6:
+			b = str(config.plugins.vfdicon.ledbright.value)
+			c = str(config.plugins.vfdicon.crossbright.value)
+			Console().ePopen("fp_control -l 0 0 -l 1 " + b + " -l 4 " + c + " -l 5 " + c + " -l 6 " + c + " -l 7 " + c)
+			print "[VFD-Icons] set brightness", config.plugins.vfdicon.contrast.value
+			Console().ePopen("fp_control -b " + str(config.plugins.vfdicon.contrast.value))
+		if config.plugins.vfdicon.textscroll.value is not None:
+			evfd.getInstance().vfd_set_SCROLL(int(config.plugins.vfdicon.textscroll.value))
+		else:
+			evfd.getInstance().vfd_set_SCROLL(1)
+		print "[VFD-Icons] set text scroll", config.plugins.vfdicon.textscroll.value
+		if config.plugins.vfdicon.textcenter.value == "1":
+			evfd.getInstance().vfd_set_CENTER(True)
+		else:
+			evfd.getInstance().vfd_set_CENTER(False)
+		print "[VFD-Icons] set text centering", config.plugins.vfdicon.textcenter.value
+		main(self)
+		ConfigListScreen.keySave(self)
+
+	def keyLeft(self):
+		self["config"].handleKey(KEY_LEFT)
+		self.newConfig()
+
+	def keyRight(self):
+		self["config"].handleKey(KEY_RIGHT)
+		self.newConfig()
+
+	def keyDown(self):
+		self['config'].instance.moveSelection(self['config'].instance.moveDown)
+		self.newConfig()
+
+	def keyUp(self):
+		self['config'].instance.moveSelection(self['config'].instance.moveUp)
+		self.newConfig()
+
+def opencfg(session, **kwargs):
+		session.open(ConfigVFDDisplay)
+		evfd.getInstance().vfd_write_string( "VFD SETUP" )
+
+def VFDdisplaymenu(menuid, **kwargs):
+	if menuid == "system":
+		return [(_("VFD display"), opencfg, "vfd_display", 44)]
+	else:
+		return []
+
+class VFDIcons:
+	def __init__(self, session):
+		self.session = session
+		self.onClose = []
+		print '[VFD-Icons] Start'
+		self.tuned = False
+		self.play = False
+		self.record = False
+		self.timeshift = False
+		self.standby = False
+		self.usb = 0
+		self.dolbyAvailable = False
+		self.mp3Available = False
+		self.DTSAvailable = False
+		self.timer = eTimer()
+		self.timer.callback.append(self.timerEvent)
+		self.timer.start(60000, False) # start one minute timer
+		Console().ePopen("fp_control -i 40 0")
+		b = str(config.plugins.vfdicon.ledbright.value)
+		c = str(config.plugins.vfdicon.crossbright.value)
+		Console().ePopen("fp_control -l 0 0 -l 1 " + b + " -l 4 " + c + " -l 5 " + c + " -l 6 " + c + " -l 7 " + c)
+		global DisplayType
+		print '[VFD-Icons] Hardware displaytype:', DisplayType
+		print '[VFD-Icons] VFD displaytype     :', DisplayTypevfd
+		if DisplayType == 6:
+			self.__event_tracker = ServiceEventTracker(screen = self,eventmap =
+				{
+					iPlayableService.evUpdatedInfo: self.UpdatedInfo,
+					iPlayableService.evUpdatedEventInfo: self.__evUpdatedEventInfo,
+					iPlayableService.evVideoSizeChanged: self.__evVideoSizeChanged,
+					iPlayableService.evSeekableStatusChanged: self.__evSeekableStatusChanged,
+					iPlayableService.evTunedIn: self.__evTunedIn,
+					iPlayableService.evTuneFailed: self.__evTuneFailed,
+					iPlayableService.evStart: self.__evStart
+				})
+			config.misc.standbyCounter.addNotifier(self.onEnterStandby, initial_call = False)
+			session.nav.record_event.append(self.gotRecordEvent)
+			try:
+				from Plugins.SystemPlugins.Hotplug.plugin import hotplugNotifier
+				hotplugNotifier.append(self.hotplugCB)
+			except:
+				pass
+			self.dir = None
+			self.mount = None
+			self.firstmount = -1
+			global hddUsed
+			hddUsed = -1
+			self.SetMount()
+			if self.mount:
+				self.firstmount = self.mount
+			if self.standby == False:
+				self.displayHddUsed()
+		else:
+			self.__event_tracker = ServiceEventTracker(screen = self,eventmap =
+				{
+					iPlayableService.evStart: self.writeName,
+				})
+		print '[VFD-Icons] Set text scrolling option'
+		if config.plugins.vfdicon.textscroll.value is not None:
+			evfd.getInstance().vfd_set_SCROLL(int(config.plugins.vfdicon.textscroll.value))
+		else:
+			evfd.getInstance().vfd_set_SCROLL(1)
+		print "[VFD-Icons] Set text centering option"
+		if config.plugins.vfdicon.textcenter.value == "1":
+			evfd.getInstance().vfd_set_CENTER(True)
+		else:
+			evfd.getInstance().vfd_set_CENTER(False)
+		print '[VFD-Icons] End initialisation'
+
+	def __evStart(self):
+		print '[VFD-Icons] __evStart'
+		self.__evSeekableStatusChanged()
+
+	def __evUpdatedEventInfo(self):
+		print '[VFD-Icons] __evUpdatedEventInfo'
+#		... and do nothing else
+
+	def UpdatedInfo(self):
+		print '[VFD-Icons] __evUpdatedInfo'
+		self.checkAudioTracks()
+		self.writeName()
+		self.showDTS()
+		if DisplayType == 6:
+			self.showCrypted()
+			self.showDolby()
+			self.showMP3()
+			self.showTuned()
+			self.showMute()
+
+	def writeName(self):
+		if (config.plugins.vfdicon.displayshow.value != "date" and config.plugins.vfdicon.displayshow.value != "day_date"
+			and config.plugins.vfdicon.displayshow.value != "time_date" and config.plugins.vfdicon.displayshow.value != "time"):
+			servicename = "        "
+			if config.plugins.vfdicon.displayshow.value != "nothing":
+				service = self.session.nav.getCurrentlyPlayingServiceOrGroup()
+				if service:
+					path = service.getPath()
+					if path:
+						self.play = True
+						servicename = "Play"
+						currPlay = self.session.nav.getCurrentService()
+						if currPlay != None and self.mp3Available: # show the MP3 tag
+							servicename = currPlay.info().getInfoString(iServiceInformation.sTagTitle) + " - " + currPlay.info().getInfoString(iServiceInformation.sTagArtist)
+							Console().ePopen("fp_control -i 27 0 -i 29 0 -i 31 0 -i 32 0 -i 38 0 -i 39 1") #Radio icon on, TV off
+						else: # show the file name
+							Console().ePopen("fp_control -i 38 1 -i 39 0") #Radio icon off, TV on
+							self.service = self.session.nav.getCurrentlyPlayingServiceReference()
+							if not self.service is None:
+								service = self.service.toCompareString()
+#								servicename = ServiceReference(service).getServiceName().replace('\xc2\x87', '').replace('\xc2\x86', '').ljust(63)
+								servicename = ServiceReference(service).getServiceName().replace('\xc2\x87', '').replace('\xc2\x86', '')
+						Console().ePopen("fp_control -i 15 1 -i 16 1 -i 25 1") #play, file
+					else:
+						if config.plugins.vfdicon.displayshow.value == "channel number": #show the channel number
+							servicename = str(service.getChannelNum())
+							if len(servicename) == 1:
+								servicename = '000' + servicename
+							elif len(servicename) == 2:
+								servicename = '00' + servicename
+							elif len(servicename) == 3:
+								servicename = '0' + servicename
+						elif config.plugins.vfdicon.displayshow.value == "channel namenumber": #show the channel number & name
+							servicename = str(service.getChannelNum()) + ' ' + ServiceReference(service).getServiceName()
+						else:
+							servicename = ServiceReference(service).getServiceName() #show the channel name
+						self.play = False
+						Console().ePopen("fp_control -i 15 0 -i 16 0 -i 25 0") #play, file off
+						#evaluate radio or tv
+						if config.plugins.vfdicon.showicons.value == "all":
+							if config.servicelist.lastmode.value == 'tv':
+								Console().ePopen("fp_control -i 38 1 -i 39 0") #TV icon on, Radio off
+							else:
+								Console().ePopen("fp_control -i 27 0 -i 29 0 -i 31 0 -i 32 0 -i 38 0 -i 39 1") #Radio icon on, TV off
+			if config.plugins.vfdicon.uppercase.value == True:
+				servicename = servicename.upper()
+			servicename = servicename.replace('  ', ' ')
+			evfd.getInstance().vfd_write_string(servicename[0:63])
+
+	def showCrypted(self):
+		if config.plugins.vfdicon.showicons.value != "none":
+			service = self.session.nav.getCurrentService()
+			if service:
+				info = service.info()
+				crypted = info.getInfo(iServiceInformation.sIsCrypted)
+				if crypted == 1:
+					Console().ePopen("fp_control -i 8 1") #padlock icon
+				else:
+					Console().ePopen("fp_control -i 8 0")
+
+	def checkAudioTracks(self):
+		self.dolbyAvailable = False
+		self.mp3Available = False
+		self.DTSAvailable = False
+		if config.plugins.vfdicon.showicons.value != "none":
+			service = self.session.nav.getCurrentService()
+			if service:
+				audio = service.audioTracks()
+				if audio:
+					n = audio.getNumberOfTracks()
+					for x in range(n):
+						i = audio.getTrackInfo(x)
+						description = i.getDescription();
+						if description.find("AC3") != -1:
+							self.dolbyAvailable = True
+						if description.find("MP3") != -1:
+							self.mp3Available = True
+						if description.find("DTS") != -1:
+							self.DTSAvailable = True
+
+	def showDolby(self):
+		if self.dolbyAvailable:
+			Console().ePopen("fp_control -i 9 1") #Dolby
+		else:
+			Console().ePopen("fp_control -i 9 0")
+
+	def showMP3(self):
+		if self.mp3Available:
+			Console().ePopen("fp_control -i 13 1") #MP3
+		else:
+			Console().ePopen("fp_control -i 13 0")
+
+	def showDTS(self):
+		if self.DTSAvailable:
+			Console().ePopen("fp_control -i 9 1") #DTS (dolby)
+		else:
+			Console().ePopen("fp_control -i 9 0")
+
+	def showTuned(self):
+		if config.plugins.vfdicon.showicons.value == "all":
+			if self.tuned == True:
+				service = self.session.nav.getCurrentService()
+				if service is not None and self.play == False:
+					info = service.info()
+					TPdata = info and info.getInfoObject(iServiceInformation.sTransponderData)
+					tunerType = TPdata.get("tuner_type")
+					if tunerType == "DVB-S":
+						Console().ePopen("fp_control -i 2 1 -i 26 0") #SAT on, TER off
+						feinfo = service.frontendInfo()
+						FEdata = feinfo and feinfo.getAll(True)
+						tunerNumber = FEdata and FEdata.get("tuner_number")
+						print "[VFD-Icons] Set SAT icon; tuner number", tunerNumber
+						if tunerNumber == 0:
+							Console().ePopen("fp_control -i 11 1 -i 12 0") #Tu1 on, Tu2 off
+						else:
+							Console().ePopen("fp_control -i 11 0 -i 12 1") #Tu1 off, Tu2 on
+#					elif tunerType == "DVB-T" or tunerType == "DVB-C":
+#						print "[VFD-Icons] Set TER icon"
+#						Console().ePopen("fp_control -i 26 1 -i 2 0 -i 44 0 -i 45 0 -i 29 0") #TER on, SAT, Tu1, Tu2 off
+				else:
+					print "[VFD-Icons] No TER or SAT icon"
+					Console().ePopen("fp_control -i 26 0 -i 2 0 -i 11 0 -i 12 0") #TER, SAT, Tu1, Tu2 off
+			else:
+				                             #TER,    SAT,   HD,    Timeshift,Dolby,MP3,   Tu1 Tu2 off
+				Console().ePopen("fp_control -i 25 0 -i 3 0 -i 6 0 -i 4 0 -i 9 0 -i 13 0 -i 11 0 -i 12 0")
+
+	def showMute(self):
+		if config.plugins.vfdicon.showicons.value != "none":
+			self.isMuted = eDVBVolumecontrol.getInstance().isMuted()
+			if self.isMuted:
+				Console().ePopen("fp_control -i 10 1") #Mute
+			else:
+				Console().ePopen("fp_control -i 10 0")
+
+	def showTimer(self):
+		if config.plugins.vfdicon.showicons.value == "all":
+			# check if timers are set
+			next_rec_time = -1
+			next_rec_time = self.session.nav.RecordTimer.getNextRecordingTime()
+			if next_rec_time > 0:
+				Console().ePopen("fp_control -i 5 1") #Timer
+			else:
+				Console().ePopen("fp_control -i 5 0")
+
+	def timerEvent(self):
+		self.showTimer() #update timer icon
+		if self.standby == False:
+			self.showMute() #update mute icon
+			if config.plugins.vfdicon.showicons.value == "all":
+				if (self.record == True or self.timeshift == True): # if recording or timeshifting, display a rotating disc
+					self.displayHddUsed() # update HDD display
+					if self.disc == 1:
+						Console().ePopen("fp_control -i 17 0")
+					if self.disc == 2:
+						Console().ePopen("fp_control -i 18 0")
+					if self.disc == 3:
+						Console().ePopen("fp_control -i 19 0")
+					if self.disc == 4:
+						Console().ePopen("fp_control -i 20 0")
+					if self.disc == 5:
+						Console().ePopen("fp_control -i 21 0")
+					if self.disc == 6:
+						Console().ePopen("fp_control -i 22 0")
+					if self.disc == 7:
+						Console().ePopen("fp_control -i 23 0")
+					if self.disc == 8:
+						Console().ePopen("fp_control -i 24 0")
+					if self.disc == 9:
+						Console().ePopen("fp_control -i 17 1")
+					if self.disc == 10:
+						Console().ePopen("fp_control -i 18 1")
+					if self.disc == 11:
+						Console().ePopen("fp_control -i 19 1")
+					if self.disc == 12:
+						Console().ePopen("fp_control -i 20 1")
+					if self.disc == 13:
+						Console().ePopen("fp_control -i 21 1")
+					if self.disc == 14:
+						Console().ePopen("fp_control -i 22 1")
+					if self.disc == 15:
+						Console().ePopen("fp_control -i 23 1")
+					if self.disc == 16:
+						Console().ePopen("fp_control -i 24 1")
+					self.disc += 1 # indicate next state
+					if self.disc == 17:
+						self.disc = 1
+		if self.record == False and self.timeshift == False:
+	 		if self.standby == False:
+				disptype = config.plugins.vfdicon.displayshow.value
+			else:
+				disptype = config.plugins.vfdicon.stbshow.value
+			self.writeDate(disptype)
+
+	def __evVideoSizeChanged(self):
+		if config.plugins.vfdicon.showicons.value != "none":
+			service = self.session.nav.getCurrentService()
+			if service:
+				info = service.info()
+				height = info.getInfo(iServiceInformation.sVideoHeight)
+				if config.plugins.vfdicon.showicons.value == "all":
+					if height > 479 and height < 576: #set 480i icon
+						Console().ePopen("fp_control -i 27 1 -i 29 0 -i 31 0 -i 32 0")
+					elif height > 575 and height < 720: #set 576i icon
+						Console().ePopen("fp_control -i 27 0 -i 29 1 -i 31 0 -i 32 0")
+					elif height > 719 and height < 1080: #set 720p icon
+						Console().ePopen("fp_control -i 27 0 -i 29 0 -i 31 1 -i 32 0")
+					elif height > 1079: #set 1080i icon
+						Console().ePopen("fp_control -i 27 0 -i 29 0 -i 31 0 -i 32 1")
+					else: #set all resolution icons off
+						Console().ePopen("fp_control -i 27 0 -i 29 0 -i 31 0 -i 32 0")
+				if height > 576: #set HD icon
+					Console().ePopen("fp_control -i 6 1")
+				else:
+					Console().ePopen("fp_control -i 6 0")
+
+	def __evSeekableStatusChanged(self):
+		if config.plugins.vfdicon.showicons.value == "all":
+			service = self.session.nav.getCurrentService()
+			if service:
+				if self.play == False:
+					ts = service and service.timeshift()
+#					if ts and ts.isTimeshiftEnabled() > 0:
+					if ts and ts.isTimeshiftActive() > 0:
+						self.timeshift = True
+						Console().ePopen("fp_control -i 4 1") #Time shift
+						self.discOn()
+					else:
+						self.timeshift = False
+						Console().ePopen("fp_control -i 4 0") #Time shift icon off
+						if self.record == False:
+							self.discOff()
+
+
+	def gotRecordEvent(self, service, event):
+		if config.plugins.vfdicon.showicons.value != 'none':
+			if event in (iRecordableService.evEnd, iRecordableService.evStart, None):
+				recs = self.session.nav.getRecordings()
+				nrecs = len(recs)
+				if nrecs > 0: #recording active
+					self.record = True
+					Console().ePopen("fp_control -i 3 1") #REC on
+					self.discOn()
+				else: # no recording active
+					Console().ePopen("fp_control -i 3 0") #REC off
+					if self.timeshift == False:
+						self.discOff()
+					self.RecordEnd()
+
+	def RecordEnd(self):
+		if self.record:
+			self.record = False
+			self.session.nav.record_event.remove(self.gotRecordEvent)
+			self.showTimer() #update timer icon
+
+	def discOn(self):
+		if config.plugins.vfdicon.showicons.value == "all":
+			self.timer.stop() # stop minute timer
+			Console().ePopen("fp_control -i 16 1 -i 17 1 -i 18 1 -i 19 1 -i 20 1 -i 21 1 -i 22 1 -i 23 1 -i 24 1")
+			self.disc = 1 #start with state #1
+			self.timer.start(2000, False) # start two second timer
+
+	def discOff(self):
+		if config.plugins.vfdicon.showicons.value == "all":
+			self.timer.stop() # stop two second timer
+			Console().ePopen("fp_control -i 16 0 -i 17 0 -i 18 0 -i 19 0 -i 20 0 -i 21 0 -i 22 0 -i 23 0 -i 24 0")
+			self.timer.start(60000, False) # start minute timer
+
+	def writeDate(self, disp): #TODO: replace with case
+		if disp == "date" or disp == "day_date" or disp == "time" or disp == "time_date" or disp == "nothing":
+			tm = localtime()
+			if disp == "day_date":
+				date = strftime("%a", tm)[0:2] + strftime(" %d-%m-%y", tm)
+				Console().ePopen("fp_control -i 33 0 -i 34 0 -i 35 0 -i 37 0") # colons off
+			elif disp == "date":
+				date = strftime("%d-%m-", tm) + strftime("%y", tm)[0:2] 
+				Console().ePopen("fp_control -i 33 0 -i 34 0 -i 35 0 -i 37 0") # all colons off
+			elif disp == "time_date":
+				date = strftime("%d-%m %H%M%S", tm) 
+				Console().ePopen("fp_control -i 33 0 -i 34 0 -i 35 1 -i 37 1") # 2 colons on
+			elif disp == "time":
+				date = strftime("      %H%M%S", tm)
+				Console().ePopen("fp_control -i 33 0 -i 34 0 -i 35 1 -i 37 1") # 2 colons on
+			elif disp == "nothing":
+				date = "            "
+				Console().ePopen("fp_control -i 33 0 -i 34 0 -i 35 0 -i 37 0") # all colons off
+			evfd.getInstance().vfd_write_string(date[0:12])
+
+	def __evTunedIn(self):
+		self.tuned = True
+
+	def __evTuneFailed(self):
+		self.tuned = False
+
+	def onLeaveStandby(self):
+		self.standby = False
+		global DisplayType
+		Console().ePopen("fp_control -i 1 0 -i 35 0 -i 37 0") # standby & colons off
+		self.timer.stop() # stop one second timer
+		evfd.getInstance().vfd_write_string("           ")
+		self.timer.start(60000, False) # start one minute timer
+		print "[VFD-Icons] minute timer started"
+		if DisplayType == 6:
+			evfd.getInstance().vfd_set_brightness(config.plugins.vfdicon.contrast.value)
+			print "[VFD-Icons] set brightness", config.plugins.vfdicon.contrast.value
+			self.timerEvent()
+			b = str(config.plugins.vfdicon.ledbright.value)
+			c = str(config.plugins.vfdicon.crossbright.value)
+			Console().ePopen("fp_control -l 0 0 -l 1 " + b + " -l 4 " + c + " -l 5 " + c + " -l 6 " + c + " -l 7 " + c) #Red LED off, cross and blue on
+			if config.plugins.vfdicon.showicons.value == "all":
+				global hddUsed
+				hddUsed = -1 #force hdd display
+				self.displayHddUsed()
+				if self.usb == 1:
+					Console().ePopen("fp_control -i 17 1") #USB
+				else:
+					Console().ePopen("fp_control -i 17 0")
+			print "[VFD-Icons] set icons on Leave Standby"
+
+	def onEnterStandby(self, configElement):
+		from Screens.Standby import inStandby
+		inStandby.onClose.append(self.onLeaveStandby)
+		global DisplayType
+		if DisplayType == 6:
+			Console().ePopen("fp_control -i 40 0") #clear all VFD icons
+			print "[VFD-Icons] set display & icons on Enter Standby"
+			if config.plugins.vfdicon.stbshow.value == "nothing":
+				evfd.getInstance().vfd_set_light(0)
+			else:
+				evfd.getInstance().vfd_set_brightness(config.plugins.vfdicon.stbcontrast.value)
+			print "[VFD-Icons] set standby brightness", config.plugins.vfdicon.stbcontrast.value
+			if config.plugins.vfdicon.standbyredledon.value:
+				Console().ePopen("fp_control -l 0 " + str(config.plugins.vfdicon.standbyredledon.value) + " -l 1 0 -l 4 0 -l 5 0 -l 6 0 -l 7 0") #Red LED on, cross off
+		if (config.plugins.vfdicon.stbshow.value == "time" or config.plugins.vfdicon.stbshow.value == "time_date"):
+			self.timer.stop() # stop minute timer
+			self.timer.start(999, False) # start one second timer
+			print "[VFD-Icons] second timer started"
+		if (config.plugins.vfdicon.stbshow.value == "date" or config.plugins.vfdicon.stbshow.value == "day_date" or config.plugins.vfdicon.stbshow.value == "time" or config.plugins.vfdicon.stbshow.value == "time_date"):
+			self.writeDate(config.plugins.vfdicon.stbshow.value)
+		else:
+			evfd.getInstance().vfd_clear_string()
+		Console().ePopen("fp_control -i 1 1") #Standby icon on
+		self.standby = True
+
+	def hotplugCB(self, dev, media_state):
+		if config.plugins.vfdicon.showicons.value == "all":
+			if dev.__contains__('sda') or dev.__contains__('sdb') or dev.__contains__('sdc'):
+#				if media_state == "add" or media_state == "change":
+				if media_state == "add":
+					Console().ePopen("fp_control -i 7 1")
+					self.usb = 1
+					self.displayHddUsedOff() # signal hot plug
+					self.mount = None # force remount
+					self.SetMount() # determine mount
+					if self.firstmount == -1 and self.mount:
+						self.firstmount = self.mount
+					self.displayHddUsed() # and display icon
+				if media_state == "remove":
+					Console().ePopen("fp_control -i 7 0")
+					self.usb = 0
+					if self.firstmount != -1:
+						self.mount = self.firstmount
+					else:
+						self.mount = None
+#					if not self.mount:
+						self.displayHddUsedOff()
+
+	def SetMount(self):
+		dir = config.usage.instantrec_path.value[:-1]
+		if dir == "<default":
+			dir = config.usage.default_path.value[:-1]
+		if not self.mount or self.dir != dir:
+			if not self.mount:
+				self.dir = dir
+#				print "[VFD-Icons] SetMount", dir
+				self.mount = self.FindMountDir(dir)
+			if not self.mount:
+				self.mount = self.FindMountDir('/autofs/sdc1')
+			if not self.mount:
+				self.mount = self.FindMountDir('/autofs/sdb1')
+			if not self.mount:
+				self.mount = self.FindMountDir('/autofs/sda1')
+			if not self.mount:
+				self.mount = self.FindMountDir('/media/hdd')
+			if not self.mount:
+				self.mount = self.FindMountDir('/hdd')
+
+	def FindMountDir(self, dir):
+		mounts = open("/proc/mounts", 'r')
+		for line in mounts:
+			result = line.strip().split()
+			if result[1].startswith(dir):
+				mounts.close()
+				return result[1]
+		mounts.close()
+		return None
+
+	def FindMountDev(self, dev):
+		mounts = open("/proc/mounts", 'r')
+		for line in mounts:
+			result = line.strip().split()
+			if result[0].startswith(dev):
+				mounts.close()
+				return result[1]
+		mounts.close()
+		return None
+
+	def displayHddUsed(self):
+		global hddUsed
+		if config.plugins.vfdicon.showicons.value == "all":
+			if self.mount == None:
+				self.displayHddUsedOff() #HDD display off
+			else:
+				Console().ePopen("fp_control -i 14 1") #HDD on
+				print "[VFD-Icons] HDD mount point:", self.mount
+		else:
+			self.displayHddUsedOff()
+
+	def displayHddUsedOff(self): #switch off hdd icon
+		Console().ePopen("fp_control -i 14 0")
+
+VFDIconsInstance = None
+
+def main(session, **kwargs):
+	global VFDIconsInstance
+	global DisplayType
+	global hddUsed
+	if VFDIconsInstance is None:
+		VFDIconsInstance = VFDIcons(session)
+	if DisplayType == 6:
+		if (config.plugins.vfdicon.displayshow.value == "date" or config.plugins.vfdicon.displayshow.value == "day_date"
+			or config.plugins.vfdicon.displayshow.value == "time" or config.plugins.vfdicon.displayshow.value == "time_date"):
+			sleep(1)
+			VFDIconsInstance.timerEvent()
+		else:
+			if config.plugins.vfdicon.showicons.value == "none":
+				Console().ePopen("fp_control -i 40 0")		
+			else:
+				hddUsed = -1
+				VFDIconsInstance.displayHddUsed()
+		VFDIconsInstance.UpdatedInfo()
+	else:
+		VFDIconsInstance.writeName()
+
+def Plugins(**kwargs):
+	l = [PluginDescriptor(
+		name = _("VFD display"),
+		description = _("VFD display configuration"),
+		where = PluginDescriptor.WHERE_MENU,
+		fnc = VFDdisplaymenu),
+		PluginDescriptor(
+		name = _("VFD-Icons"),
+		description = _("VFD-Icons for Fortis FS9000/9200"),
+		where = PluginDescriptor.WHERE_SESSIONSTART,
+		fnc = main)]
+	if config.plugins.vfdicon.extMenu.value:
+		l.append(PluginDescriptor(
+			name = _("VFD display"),
+			description = _("VFD configuration for Fortis FS9000/9200"),
+			where = PluginDescriptor.WHERE_PLUGINMENU,
+			icon = _("vfddisplay.png"),
+			fnc = opencfg))
+	return l
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/fs9000VFD/meta/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/fs9000VFD/meta/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/fs9000VFD/meta/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/fs9000VFD/meta/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,3 @@
+installdir = $(datadir)/meta
+
+dist_install_DATA = plugin_vfd-icons.xml
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/fs9000VFD/meta/plugin_vfd-icons.xml enigma2-nightly/lib/python/Plugins/Extensions/fs9000VFD/meta/plugin_vfd-icons.xml
--- enigma2-nightly.org/lib/python/Plugins/Extensions/fs9000VFD/meta/plugin_vfd-icons.xml	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/fs9000VFD/meta/plugin_vfd-icons.xml	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,20 @@
+<default>
+	<prerequisites>
+		<hardware type="fs9000" />
+		<tag type="System" />
+	</prerequisites>
+	<info>
+		<author>Audioniek/Team Ducktales</author>
+		<name>VFD-Icons</name>
+		<packagename>enigma2-plugin-extensions-vfd-icons</packagename>
+		<packagetype>public</packagetype> <!-- internal/public , public is default, internal metas are not displayed inside plugin manager -->
+		<shortdescription>Displays text and icons on vfd</shortdescription>
+		<description>Displays text and icons on vfd.
+		</description>
+	</info>
+
+	<files type="package"> <!-- without version, without .ipk -->
+		<file type="package" name="enigma2-plugin-extensions-fs9000VFD" />
+	</files>
+
+</default>
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/fs9000VFD/locale/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/fs9000VFD/locale/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/fs9000VFD/locale/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/fs9000VFD/locale/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,3 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/fs9000VFD/locale
+
+SUBDIRS = nl
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/fs9000VFD/locale/nl/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/fs9000VFD/locale/nl/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/fs9000VFD/locale/nl/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/fs9000VFD/locale/nl/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,3 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/fs9000VFD/locale/nl
+
+SUBDIRS = LC_MESSAGES
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/fs9000VFD/locale/nl/LC_MESSAGES/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/fs9000VFD/locale/nl/LC_MESSAGES/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/fs9000VFD/locale/nl/LC_MESSAGES/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/fs9000VFD/locale/nl/LC_MESSAGES/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,10 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/fs9000VFD/locale/nl/LC_MESSAGES
+
+.po.mo:
+	$(MSGFMT) -o $@ $<
+
+BUILT_SOURCES = VFD-Icons.mo
+
+dist_install_DATA = \
+	VFD-Icons.po \
+	VFD-Icons.mo
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/fs9000VFD/locale/nl/LC_MESSAGES/VFD-Icons.po Extensions/fs9000VFD/locale/nl/LC_MESSAGES/VFD-Icons.po
--- enigma2-nightly.org/lib/python/Plugins/Extensions/fs9000VFD/locale/nl/LC_MESSAGES/VFD-Icons.po	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/fs9000VFD/locale/nl/LC_MESSAGES/VFD-Icons.po	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,115 @@
+msgid ""
+msgstr ""
+"Project-Id-Version: VFD-Icons for Fortis FS9000/9200\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2013-07-17 20:30+0100\n"
+"PO-Revision-Date: 2013-09-18 14:24+0100\n"
+"Last-Translator: Audioniek\n"
+"Language-Team: \n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"X-Generator: Poedit 1.5.4\n"
+"Language: \n"
+"X-Poedit-SourceCharset: UTF-8\n"
+"X-Poedit-Language: Dutch\n"
+"X-Poedit-Country: NETHERLANDS\n"
+
+msgid "channel number"
+msgstr "zendernummer"
+
+msgid "channel name"
+msgstr "zendernaam"
+
+msgid "channel number and name"
+msgstr "zendernummer en -naam"
+
+msgid "date"
+msgstr "datum"
+
+msgid "day and date"
+msgstr "dag en datum"
+
+msgid "blank"
+msgstr "geen"
+
+msgid "nothing"
+msgstr "blanco display"
+
+msgid "time"
+msgstr "tijd"
+
+msgid "time and date"
+msgstr "tijd en datum"
+
+msgid "time, day and date"
+msgstr "tijd, dag en datum"
+
+msgid "once"
+msgstr "eenmaal"
+
+msgid "continuous"
+msgstr "voortdurend"
+
+msgid "all"
+msgstr "alle"
+
+msgid "partial"
+msgstr "gedeeltelijk"
+
+msgid "none"
+msgstr "geen"
+
+msgid "Stby LED brightness"
+msgstr "LED helderheid stby"
+
+msgid "Blue LED brightness"
+msgstr "Blauwe LED helderh."
+
+msgid "Cross brightness"
+msgstr "Stuurkruis helderheid"
+
+msgid "yes"
+msgstr "ja"
+
+msgid "VFD display configuration"
+msgstr "VFD displayinstellingen"
+
+msgid "Cancel"
+msgstr "Annuleren"
+
+msgid "OK"
+msgstr "Bevestigen"
+
+msgid "Show on VFD display"
+msgstr "Info op VFD display"
+
+msgid "Show on VFD display in standby"
+msgstr "Info op VFD display in standby"
+
+msgid "VFD brightness"
+msgstr "VFD helderheid"
+
+msgid "Standby brightness"
+msgstr "Helderheid in standby"
+
+msgid "Uppercase letters only"
+msgstr "Alleen hoofdletters"
+
+msgid "Scroll text"
+msgstr "Tekst scrollen"
+
+msgid "Center text"
+msgstr "Tekst centreren"
+
+msgid "Show icons"
+msgstr "Toon iconen"
+
+msgid "Show this plugin in plugin menu"
+msgstr "Toon deze plugin in het Applicatie-menu"
+
+msgid "VFD SETUP"
+msgstr "VFD INSTELLINGEN"
+
+msgid "VFD configuration for Fortis FS9000/9200"
+msgstr "VFD displayinstellingen voor Fortis FS9000/9200"
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs7110VFD/__init__.py enigma2-nightly/lib/python/Plugins/Extensions/hs7110VFD/__init__.py
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs7110VFD/__init__.py	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs7110VFD/__init__.py	2012-03-08 20:35:00.000000000 +0100
@@ -0,0 +1,2 @@
+
+
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs7110VFD/vfddisplay.png enigma2-nightly/lib/python/Plugins/Extensions/hs7110VFD/vfddisplay.png
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs7110VFD/vfddisplay.png	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs7110VFD/vfddisplay.png	2012-03-08 20:35:00.000000000 +0100
@@ -0,0 +1,2 @@
+
+
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs7110VFD/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/hs7110VFD/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs7110VFD/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs7110VFD/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,10 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/hs7110VFD
+
+SUBDIRS = locale meta
+
+install_PYTHON = \
+	__init__.py \
+	plugin.py
+
+dist_install_DATA = \
+	vfddisplay.png
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs7110VFD/plugin.py enigma2-nightly/lib/python/Plugins/Extensions/hs7110VFD/plugin.py
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs7110VFD/plugin.py	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs7110VFD/plugin.py	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,193 @@
+# -*- coding: utf-8 -*-
+from Plugins.Plugin import PluginDescriptor
+from enigma import iPlayableService, evfd
+from Components.ServiceEventTracker import ServiceEventTracker
+from Components.Console import Console
+from Components.ActionMap import ActionMap
+from Components.config import *
+from Components.ConfigList import ConfigList, ConfigListScreen
+from Components.Sources.StaticText import StaticText
+from Tools.HardwareInfo import HardwareInfo
+from Screens.Screen import Screen
+import gettext
+#Version 140128.3
+stb = HardwareInfo().get_device_name()+++
+
+try:
+	DisplayType = evfd.getInstance().getVfdType()
+	if DisplayType != 10:
+		DisplayType = None
+except:
+	DisplayType = None
+DisplayTypevfd = DisplayType
+
+if DisplayTypevfd is None:
+	if stb.lower() == 'hs7110':
+		DisplayType = 10
+	else:
+		DisplayType = None
+config.plugins.vfdicon = ConfigSubsection()
+config.plugins.vfdicon.standbyredled = ConfigSlider(default=7, limits=(1, 7))
+#config.plugins.vfdicon.dstandbyredled = ConfigSlider(default=1, limits=(1, 7))
+config.plugins.vfdicon.extMenu = ConfigYesNo(default=True)
+
+class ConfigVFDDisplay(Screen, ConfigListScreen):
+	def __init__(self, session):
+		self.icons_showicons = None
+		Screen.__init__(self, session)
+		self.skinName = ["Setup"]
+		self["key_red"] = StaticText(_("Cancel"))
+		self["key_green"] = StaticText(_("OK"))
+		self["actions"] = ActionMap(["OkCancelActions", "DirectionActions", "SetupActions", "ColorActions"],
+			{
+				'left': self.keyLeft,
+				'down': self.keyDown,
+				'up': self.keyUp,
+				'right': self.keyRight,
+				"cancel": self.cancel,
+				"ok": self.keySave,
+				"green": self.keySave,
+				"red": self.cancel,
+			}, -2)
+		self.cfglist = []
+		ConfigListScreen.__init__(self, self.cfglist, session = session)
+		self.setTitle(_("LED configuration"))
+		self.createSetup()
+
+	def createSetup(self):
+		self.cfglist = []
+		self.cfglist.append(getConfigListEntry(_("Stby LED brightness"), config.plugins.vfdicon.standbyredled))
+#		self.cfglist.append(getConfigListEntry(_("Deep standby LED brightness"), config.plugins.vfdicon.dstandbyredled))
+	        self.cfglist.append(getConfigListEntry(_('Show this plugin in plugin menu'), config.plugins.vfdicon.extMenu))
+		self["config"].list = self.cfglist
+		self["config"].l.setList(self.cfglist)
+
+	def newConfig(self):
+		global DisplayType
+		if self["config"].getCurrent()[1] == config.plugins.vfdicon.standbyredled:
+			Console().ePopen("fp_control -l 0 " + str(config.plugins.vfdicon.standbyredled.value))
+#		elif self["config"].getCurrent()[1] == config.plugins.vfdicon.dstandbyredled:
+#			Console().ePopen("fp_control -l 0 " + str(config.plugins.vfdicon.dstandbyredled.value))
+		else:
+			Console().ePopen("fp_control -l 0 0")
+		print "newConfig", self["config"].getCurrent()
+		self.createSetup()
+
+	def cancel(self):
+		main(self)
+		Console().ePopen("fp_control -l 0 0")
+		ConfigListScreen.keyCancel(self)
+
+	def keySave(self):
+		global DisplayType
+		Console().ePopen("fp_control -l 0 0 ")
+		main(self)
+		ConfigListScreen.keySave(self)
+
+	def keyLeft(self):
+		self["config"].handleKey(KEY_LEFT)
+		self.newConfig()
+
+	def keyRight(self):
+		self["config"].handleKey(KEY_RIGHT)
+		self.newConfig()
+
+	def keyDown(self):
+		self['config'].instance.moveSelection(self['config'].instance.moveDown)
+		self.newConfig()
+
+	def keyUp(self):
+		self['config'].instance.moveSelection(self['config'].instance.moveUp)
+		self.newConfig()
+
+def opencfg(session, **kwargs):
+		session.open(ConfigVFDDisplay)
+		evfd.getInstance().vfd_write_string( "VFD SETUP" )
+
+def VFDdisplaymenu(menuid, **kwargs):
+	if menuid == "system":
+		return [(_("LED control"), opencfg, "vfd_display", 44)]
+	else:
+		return []
+
+class VFDIcons:
+	def __init__(self, session):
+		self.session = session
+		self.onClose = []
+		print '[VFD-Icons] Start'
+		self.standby = False
+		global DisplayType
+		print '[VFD-Icons] Hardware displaytype:', DisplayType
+		print '[VFD-Icons] VFD displaytype     :', DisplayTypevfd
+		if DisplayType == 10:
+			self.__event_tracker = ServiceEventTracker(screen = self,eventmap =
+				{
+					iPlayableService.evStart: self.__evStart
+				})
+			config.misc.standbyCounter.addNotifier(self.onEnterStandby, initial_call = False)
+		print '[VFD-Icons] End initialisation'
+
+	def __evStart(self):
+		print '[VFD-Icons] __evStart'
+#		... and do nothing else
+
+#	def __evUpdatedEventInfo(self):
+#		print '[VFD-Icons] __evUpdatedEventInfo'
+#		... and do nothing else
+
+#	def UpdatedInfo(self):
+#		print '[VFD-Icons] __evUpdatedInfo'
+#		... and do nothing else
+
+#	def timerEvent(self):
+#		print '[VFD-Icons] Timer event'
+#		... and do nothing else
+
+#	def __evTunedIn(self):
+#		self.tuned = True
+
+#	def __evTuneFailed(self):
+#		self.tuned = False
+
+	def onLeaveStandby(self):
+		self.standby = False
+		global DisplayType
+		if DisplayType == 10:
+			Console().ePopen("fp_control -l 0 0") #Red LED off
+
+	def onEnterStandby(self, configElement):
+		from Screens.Standby import inStandby
+		inStandby.onClose.append(self.onLeaveStandby)
+		global DisplayType
+		if DisplayType == 10:
+			if config.plugins.vfdicon.standbyredled.value:
+				Console().ePopen("fp_control -l 0 " + str(config.plugins.vfdicon.standbyredled.value)) #Red LED on
+		self.standby = True
+
+VFDIconsInstance = None
+
+def main(session, **kwargs):
+	global VFDIconsInstance
+	global DisplayType
+	if VFDIconsInstance is None:
+		VFDIconsInstance = VFDIcons(session)
+
+def Plugins(**kwargs):
+	l = [PluginDescriptor(
+		name = _("LED display"),
+		description = _("LED configuration"),
+		where = PluginDescriptor.WHERE_MENU,
+		fnc = VFDdisplaymenu),
+		PluginDescriptor(
+		name = _("LED control"),
+		description = _("LED control for Fortis HS7110"),
+		where = PluginDescriptor.WHERE_SESSIONSTART,
+		fnc = main)]
+	if config.plugins.vfdicon.extMenu.value:
+		l.append(PluginDescriptor(
+			name = _("LED display"),
+			description = _("LED control for Fortis HS7110"),
+			where = PluginDescriptor.WHERE_PLUGINMENU,
+			icon = _("vfddisplay.png"),
+			fnc = opencfg))
+	return l
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs7110VFD/meta/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/hs7110VFD/meta/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs7110VFD/meta/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs7110VFD/meta/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,3 @@
+installdir = $(datadir)/meta
+
+dist_install_DATA = plugin_vfd-icons.xml
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs7110VFD/meta/plugin_vfd-icons.xml enigma2-nightly/lib/python/Plugins/Extensions/hs7110VFD/meta/plugin_vfd-icons.xml
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs7110VFD/meta/plugin_vfd-icons.xml	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs7110VFD/meta/plugin_vfd-icons.xml	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,20 @@
+<default>
+	<prerequisites>
+		<hardware type="hs7110" />
+		<tag type="System" />
+	</prerequisites>
+	<info>
+		<author>Audioniek/Team Ducktales</author>
+		<name>VFD-Icons</name>
+		<packagename>enigma2-plugin-systemplugins-vfd-icons</packagename>
+		<packagetype>public</packagetype> <!-- internal/public , public is default, internal metas are not displayed inside plugin manager -->
+		<shortdescription>Displays text and icons on vfd</shortdescription>
+		<description>Displays text and icons on vfd.
+		</description>
+	</info>
+
+	<files type="package"> <!-- without version, without .ipk -->
+		<file type="package" name="enigma2-plugin-extensions-HS7110VFD" />
+	</files>
+
+</default>
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs7110VFD/locale/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/hs7110VFD/locale/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs7110VFD/locale/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs7110VFD/locale/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,3 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/hs7110VFD/locale
+
+SUBDIRS = nl
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs7110VFD/locale/nl/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/hs7110VFD/locale/nl/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs7110VFD/locale/nl/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs7110VFD/locale/nl/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,3 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/hs7110VFD/locale/nl
+
+SUBDIRS = LC_MESSAGES
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs7110VFD/locale/nl/LC_MESSAGES/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/hs7110VFD/locale/nl/LC_MESSAGES/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs7110VFD/locale/nl/LC_MESSAGES/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs7110VFD/locale/nl/LC_MESSAGES/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,10 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/hs7110VFD/locale/nl/LC_MESSAGES
+
+.po.mo:
+	$(MSGFMT) -o $@ $<
+
+BUILT_SOURCES = VFD-Icons.mo
+
+dist_install_DATA = \
+	VFD-Icons.po \
+	VFD-Icons.mo
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs7110VFD/locale/nl/LC_MESSAGES/VFD-Icons.po Extensions/hs7110VFD/locale/nl/LC_MESSAGES/VFD-Icons.po
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs7110VFD/locale/nl/LC_MESSAGES/VFD-Icons.po	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs7110VFD/locale/nl/LC_MESSAGES/VFD-Icons.po	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,134 @@
+msgid ""
+msgstr ""
+"Project-Id-Version: VFD-Icons for Fortis HS7110\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2013-07-17 20:30+0100\n"
+"PO-Revision-Date: 2013-09-18 14:24+0100\n"
+"Last-Translator: Audioniek\n"
+"Language-Team: \n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"X-Generator: Poedit 1.5.4\n"
+"Language: \n"
+"X-Poedit-SourceCharset: UTF-8\n"
+"X-Poedit-Language: Dutch\n"
+"X-Poedit-Country: NETHERLANDS\n"
+
+msgid "channel number"
+msgstr "zendernummer"
+
+msgid "channel name"
+msgstr "zendernaam"
+
+msgid "channel number and name"
+msgstr "zendernummer en -naam"
+
+msgid "date"
+msgstr "datum"
+
+msgid "day and date"
+msgstr "dag en datum"
+
+msgid "blank"
+msgstr "geen"
+
+msgid "nothing"
+msgstr "blanco display"
+
+msgid "time"
+msgstr "tijd"
+
+msgid "time and date"
+msgstr "tijd en datum"
+
+msgid "time, day and date"
+msgstr "tijd, dag en datum"
+
+msgid "once"
+msgstr "eenmaal"
+
+msgid "continuous"
+msgstr "voortdurend"
+
+msgid "all"
+msgstr "alle"
+
+msgid "partial"
+msgstr "gedeeltelijk"
+
+msgid "none"
+msgstr "geen"
+
+msgid "signal quality"
+msgstr "signaalkwaliteit"
+
+msgid "on hdd"
+msgstr "alleen hdd"
+
+msgid "on all mounts"
+msgstr "alle mounts"
+
+msgid "yes"
+msgstr "ja"
+
+msgid "blink"
+msgstr "knipperen"
+
+msgid "on"
+msgstr "aan"
+
+msgid "VFD display configuration"
+msgstr "VFD displayinstellingen"
+
+msgid "Cancel"
+msgstr "Annuleren"
+
+msgid "OK"
+msgstr "Bevestigen"
+
+msgid "Show on VFD display"
+msgstr "Info op VFD display"
+
+msgid "Show on VFD display in standby"
+msgstr "Info op VFD display in standby"
+
+msgid "VFD brightness"
+msgstr "VFD helderheid"
+
+msgid "Standby brightness"
+msgstr "Helderheid in standby"
+
+msgid "Uppercase letters only"
+msgstr "Alleen hoofdletters"
+
+msgid "Scroll text"
+msgstr "Tekst scrollen"
+
+msgid "Center text"
+msgstr "Tekst centreren"
+
+msgid "Show icons"
+msgstr "Toon iconen"
+
+msgid "Show HDD icons"
+msgstr "Toon HDD-iconen"
+
+msgid "Red LED on in standby"
+msgstr "Rode LED aan in standby"
+
+msgid "Red LED on in deep standby"
+msgstr "Rode LED aan in diepe standby"
+
+msgid "Red LED during recording"
+msgstr "Rode LED tijdens opnemen"
+
+msgid "Show this plugin in plugin menu"
+msgstr "Toon deze plugin in het Applicatie-menu"
+
+msgid "LED SETUP"
+msgstr "LED INSTELLINGEN"
+
+msgid "LED display configuration for Fortis HS7110"
+msgstr "LED displayinstellingen voor Fortis FS7110"
+
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs8200VFD/__init__.py enigma2-nightly/lib/python/Plugins/Extensions/hs8200VFD/__init__.py
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs8200VFD/__init__.py	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs8200VFD/__init__.py	2012-03-08 20:35:00.000000000 +0100
@@ -0,0 +1,2 @@
+
+
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs8200VFD/vfddisplay.png enigma2-nightly/lib/python/Plugins/Extensions/hs8200VFD/vfddisplay.png
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs8200VFD/vfddisplay.png	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs8200VFD/vfddisplay.png	2012-03-08 20:35:00.000000000 +0100
@@ -0,0 +1,2 @@
+
+
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs8200VFD/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/hs8200VFD/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs8200VFD/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs8200VFD/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,10 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/hs8200VFD
+
+SUBDIRS = locale meta
+
+install_PYTHON = \
+	__init__.py \
+	plugin.py
+
+dist_install_DATA = \
+	vfddisplay.png
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs8200VFD/plugin.py enigma2-nightly/lib/python/Plugins/Extensions/hs8200VFD/plugin.py
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs8200VFD/plugin.py	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs8200VFD/plugin.py	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,418 @@
+# -*- coding: utf-8 -*-
+from Plugins.Plugin import PluginDescriptor
+from ServiceReference import ServiceReference
+from Components.ServiceList import ServiceList
+from enigma import iPlayableService, iServiceInformation, iTimeshiftServicePtr, iRecordableService, eTimer, evfd, eDVBVolumecontrol, iFrontendInformation
+from time import localtime, strftime, sleep
+from Components.ServiceEventTracker import ServiceEventTracker
+from Components.Console import Console
+from Tools.Directories import fileExists, resolveFilename, SCOPE_LANGUAGE, SCOPE_PLUGINS
+from os import environ, statvfs
+from Components.ActionMap import ActionMap
+from Components.config import *
+from Components.ConfigList import ConfigList, ConfigListScreen
+from Components.Language import language
+from Components.Sources.StaticText import StaticText
+from Tools.HardwareInfo import HardwareInfo
+from Screens.Screen import Screen
+import gettext
+#Version 140406.1
+stb = HardwareInfo().get_device_name()
+lang = language.getLanguage()
+environ['LANGUAGE'] = lang[:2]
+gettext.bindtextdomain('enigma2', resolveFilename(SCOPE_LANGUAGE))
+gettext.textdomain('enigma2')
+gettext.bindtextdomain('VFD-Icons', '%s%s' % (resolveFilename(SCOPE_PLUGINS), 'SystemPlugins/VFD-Icons/locale/'))
+
+def _(txt):
+	t = gettext.dgettext('VFD-Icons', txt)
+	if t == txt:
+		t = gettext.gettext(txt)
+	return t
+
+def translateBlock(block):
+	for x in TranslationHelper:
+		if block.__contains__(x[0]):
+			block = block.replace(x[0], x[1])
+	return block
+
+try:
+	DisplayType = evfd.getInstance().getVfdType()
+	if DisplayType != 5:
+		DisplayType = None
+except:
+	DisplayType = None
+DisplayTypevfd = DisplayType
+
+if DisplayTypevfd is None:
+	if stb.lower() == 'atevio7500' or stb.lower() == 'hs8200':
+		DisplayType = 5
+	else:
+		DisplayType = None
+
+config.plugins.vfdicon = ConfigSubsection()
+config.plugins.vfdicon.displayshow = ConfigSelection(default = "channel",
+	choices = [
+		("nothing", _("blank")),
+		("channel number", _("channel number")),
+		("channel", _("channel name")),
+		("channel namenumber", _("channel number and name")),
+		("time", _("time")),
+		("date", _("date")),
+		("time_date", _("time and date")),
+		("day_date", _("day and date"))
+		])
+config.plugins.vfdicon.stbshow = ConfigSelection(default = "time_date",
+	choices = [
+		("nothing", _("nothing")),
+		("time", _("time")),
+		("date", _("date")),
+		("time_date", _("time and date")),
+		("day_date", _("day and date"))
+		])
+config.plugins.vfdicon.contrast = ConfigSlider(default=6, limits=(0, 7))
+config.plugins.vfdicon.stbcontrast = ConfigSlider(default=0, limits=(0, 7))
+config.plugins.vfdicon.uppercase = ConfigYesNo(default=False)
+config.plugins.vfdicon.textscroll = ConfigSelection(default = "1",
+	choices = [
+		("0", _("no")),
+		("1", _("once")),
+		("2", _("continuous"))
+		])
+config.plugins.vfdicon.textcenter = ConfigSelection(default = "0",
+	choices = [
+		("0", _("no")),
+		("1", _("yes"))
+		])
+config.plugins.vfdicon.showicons = ConfigSelection(default = "all",
+	choices = [
+		("none", _("none")),
+		("partial", _("partial")),
+		("all", _("all"))
+		])
+config.plugins.vfdicon.standbyredledon = ConfigSlider(default=7, limits=(0, 31))
+config.plugins.vfdicon.ledbright = ConfigSlider(default=15, limits=(0, 31))
+config.plugins.vfdicon.crossbright = ConfigSlider(default=31, limits=(0, 31))
+config.plugins.vfdicon.extMenu = ConfigYesNo(default=True)
+
+class ConfigVFDDisplay(Screen, ConfigListScreen):
+	def __init__(self, session):
+		self.icons_showicons = None
+		Screen.__init__(self, session)
+		self.skinName = ["Setup"]
+		self["key_red"] = StaticText(_("Cancel"))
+		self["key_green"] = StaticText(_("OK"))
+		self["actions"] = ActionMap(["OkCancelActions", "DirectionActions", "SetupActions", "ColorActions"],
+			{
+				'left': self.keyLeft,
+				'down': self.keyDown,
+				'up': self.keyUp,
+				'right': self.keyRight,
+				"cancel": self.cancel,
+				"ok": self.keySave,
+				"green": self.keySave,
+				"red": self.cancel,
+			}, -2)
+		self.cfglist = []
+		ConfigListScreen.__init__(self, self.cfglist, session = session)
+		self.setTitle(_("VFD display configuration"))
+		self.createSetup()
+
+	def createSetup(self):
+		self.cfglist = []
+		self.cfglist.append(getConfigListEntry(_("Show on VFD display"), config.plugins.vfdicon.displayshow))
+		self.cfglist.append(getConfigListEntry(_("Show on VFD display in standby"), config.plugins.vfdicon.stbshow))
+		if DisplayType == 5:
+			self.cfglist.append(getConfigListEntry(_("VFD brightness"), config.plugins.vfdicon.contrast))
+			self.cfglist.append(getConfigListEntry(_("Standby brightness"), config.plugins.vfdicon.stbcontrast))
+		self.cfglist.append(getConfigListEntry(_("Uppercase letters only"), config.plugins.vfdicon.uppercase))
+		self.cfglist.append(getConfigListEntry(_("Scroll text"), config.plugins.vfdicon.textscroll))
+		self.cfglist.append(getConfigListEntry(_("Center text"), config.plugins.vfdicon.textcenter))
+		self.icons_showicons = config.plugins.vfdicon.showicons.value
+		if DisplayType == 5:
+			self.cfglist.append(getConfigListEntry(_('Stby LED brightness'), config.plugins.vfdicon.standbyredledon))
+			self.cfglist.append(getConfigListEntry(_('Blue LED brightness'), config.plugins.vfdicon.ledbright))
+			self.cfglist.append(getConfigListEntry(_('Cross brightness'), config.plugins.vfdicon.crossbright))
+	        self.cfglist.append(getConfigListEntry(_('Show this plugin in plugin menu'), config.plugins.vfdicon.extMenu))
+		self["config"].list = self.cfglist
+		self["config"].l.setList(self.cfglist)
+
+	def newConfig(self):
+		global DisplayType
+		if DisplayType == 5:
+			if self["config"].getCurrent()[1] == config.plugins.vfdicon.stbcontrast:
+				Console().ePopen("fp_control -b " + str(config.plugins.vfdicon.stbcontrast.value))
+			elif self["config"].getCurrent()[1] == config.plugins.vfdicon.standbyredledon:
+				Console().ePopen("fp_control -l 0 " + str(config.plugins.vfdicon.standbyredledon.value) + " -l 1 0 -l 4 0 -l 5 0 -l 6 0 -l 7 0")
+			else:
+				Console().ePopen("fp_control -b " + str(config.plugins.vfdicon.contrast.value))
+				print ""
+				b = str(config.plugins.vfdicon.ledbright.value)
+				c = str(config.plugins.vfdicon.crossbright.value)
+				Console().ePopen("fp_control -l 0 0 -l 1 " + b + " -l 4 " + c + " -l 5 " + c + " -l 6 " + c + " -l 7 " + c)
+		print "newConfig", self["config"].getCurrent()
+		self.createSetup()
+
+	def cancel(self):
+		main(self)
+		b = str(config.plugins.vfdicon.ledbright.value)
+		c = str(config.plugins.vfdicon.crossbright.value)
+		Console().ePopen("fp_control -l 0 0 -l 1 " + b + " -l 4 " + c + " -l 5 " + c + " -l 6 " + c + " -l 7 " + c)
+		ConfigListScreen.keyCancel(self)
+
+	def keySave(self):
+		global DisplayType
+		if DisplayType == 5:
+			b = str(config.plugins.vfdicon.ledbright.value)
+			c = str(config.plugins.vfdicon.crossbright.value)
+			Console().ePopen("fp_control -l 0 0 -l 1 " + b + " -l 4 " + c + " -l 5 " + c + " -l 6 " + c + " -l 7 " + c)
+			print "[VFD-Icons] set brightness", config.plugins.vfdicon.contrast.value
+			Console().ePopen("fp_control -b " + str(config.plugins.vfdicon.contrast.value))
+		if config.plugins.vfdicon.textscroll.value is not None:
+			evfd.getInstance().vfd_set_SCROLL(int(config.plugins.vfdicon.textscroll.value))
+		else:
+			evfd.getInstance().vfd_set_SCROLL(1)
+		print "[VFD-Icons] set text scroll", config.plugins.vfdicon.textscroll.value
+		if config.plugins.vfdicon.textcenter.value == "1":
+			evfd.getInstance().vfd_set_CENTER(True)
+		else:
+			evfd.getInstance().vfd_set_CENTER(False)
+		print "[VFD-Icons] set text centering", config.plugins.vfdicon.textcenter.value
+		main(self)
+		ConfigListScreen.keySave(self)
+
+	def keyLeft(self):
+		self["config"].handleKey(KEY_LEFT)
+		self.newConfig()
+
+	def keyRight(self):
+		self["config"].handleKey(KEY_RIGHT)
+		self.newConfig()
+
+	def keyDown(self):
+		self['config'].instance.moveSelection(self['config'].instance.moveDown)
+		self.newConfig()
+
+	def keyUp(self):
+		self['config'].instance.moveSelection(self['config'].instance.moveUp)
+		self.newConfig()
+
+def opencfg(session, **kwargs):
+		session.open(ConfigVFDDisplay)
+		evfd.getInstance().vfd_write_string( "VFD SETUP" )
+
+def VFDdisplaymenu(menuid, **kwargs):
+	if menuid == "system":
+		return [(_("VFD display"), opencfg, "vfd_display", 44)]
+	else:
+		return []
+
+class VFDIcons:
+	def __init__(self, session):
+		self.session = session
+		self.onClose = []
+		print '[VFD-Icons] Start'
+		self.standby = False
+		self.dolbyAvailable = False
+		self.mp3Available = False
+		self.DTSAvailable = False
+		self.timer = eTimer()
+		self.timer.callback.append(self.timerEvent)
+		self.timer.start(60000, False) # start one minute timer
+		b = str(config.plugins.vfdicon.ledbright.value)
+		c = str(config.plugins.vfdicon.crossbright.value)
+		Console().ePopen("fp_control -l 0 0 -l 1 " + b + " -l 4 " + c + " -l 5 " + c + " -l 6 " + c + " -l 7 " + c)
+		global DisplayType
+		print '[VFD-Icons] Hardware displaytype:', DisplayType
+		print '[VFD-Icons] VFD displaytype     :', DisplayTypevfd
+		if DisplayType == 5:
+			self.__event_tracker = ServiceEventTracker(screen = self,eventmap =
+				{
+					iPlayableService.evUpdatedInfo: self.UpdatedInfo,
+					iPlayableService.evUpdatedEventInfo: self.__evUpdatedEventInfo,
+					iPlayableService.evStart: self.__evStart
+				})
+			config.misc.standbyCounter.addNotifier(self.onEnterStandby, initial_call = False)
+		else:
+			self.__event_tracker = ServiceEventTracker(screen = self,eventmap =
+				{
+					iPlayableService.evStart: self.writeName,
+				})
+		print '[VFD-Icons] Set text scrolling option'
+		if config.plugins.vfdicon.textscroll.value is not None:
+			evfd.getInstance().vfd_set_SCROLL(int(config.plugins.vfdicon.textscroll.value))
+		else:
+			evfd.getInstance().vfd_set_SCROLL(1)
+		print "[VFD-Icons] Set text centering option"
+		if config.plugins.vfdicon.textcenter.value == "1":
+			evfd.getInstance().vfd_set_CENTER(True)
+		else:
+			evfd.getInstance().vfd_set_CENTER(False)
+		print '[VFD-Icons] End initialisation'
+
+	def __evStart(self):
+		print '[VFD-Icons] __evStart'
+
+	def __evUpdatedEventInfo(self):
+		print '[VFD-Icons] __evUpdatedEventInfo'
+#		... and do nothing else
+
+	def UpdatedInfo(self):
+		print '[VFD-Icons] __evUpdatedInfo'
+		self.checkAudioTracks()
+		self.writeName()
+
+	def writeName(self):
+		if (config.plugins.vfdicon.displayshow.value != "date" and config.plugins.vfdicon.displayshow.value != "day_date"
+			and config.plugins.vfdicon.displayshow.value != "time_date" and config.plugins.vfdicon.displayshow.value != "time"):
+			servicename = "            "
+			if config.plugins.vfdicon.displayshow.value != "nothing":
+				service = self.session.nav.getCurrentlyPlayingServiceOrGroup()
+				if service:
+					path = service.getPath()
+					if path:
+						self.play = True
+						servicename = "Play"
+						currPlay = self.session.nav.getCurrentService()
+						if currPlay != None and self.mp3Available: # show the MP3 tag
+							servicename = currPlay.info().getInfoString(iServiceInformation.sTagTitle) + " - " + currPlay.info().getInfoString(iServiceInformation.sTagArtist)
+						else: # show the file name
+							self.service = self.session.nav.getCurrentlyPlayingServiceReference()
+							if not self.service is None:
+								service = self.service.toCompareString()
+								servicename = ServiceReference(service).getServiceName().replace('\xc2\x87', '').replace('\xc2\x86', '')
+					else:
+						if config.plugins.vfdicon.displayshow.value == "channel number": #show the channel number
+							servicename = str(service.getChannelNum())
+							if len(servicename) == 1:
+								servicename = '000' + servicename
+							elif len(servicename) == 2:
+								servicename = '00' + servicename
+							elif len(servicename) == 3:
+								servicename = '0' + servicename
+						elif config.plugins.vfdicon.displayshow.value == "channel namenumber": #show the channel number & name
+							servicename = str(service.getChannelNum()) + ' ' + ServiceReference(service).getServiceName()
+						else:
+							servicename = ServiceReference(service).getServiceName() #show the channel name
+						self.play = False
+			if config.plugins.vfdicon.uppercase.value == True:
+				servicename = servicename.upper()
+			servicename = servicename.replace('  ', ' ')
+			evfd.getInstance().vfd_write_string(servicename[0:63])
+
+	def checkAudioTracks(self):
+		self.dolbyAvailable = False
+		self.mp3Available = False
+		self.DTSAvailable = False
+		if config.plugins.vfdicon.showicons.value != "none":
+			service = self.session.nav.getCurrentService()
+			if service:
+				audio = service.audioTracks()
+				if audio:
+					n = audio.getNumberOfTracks()
+					for x in range(n):
+						i = audio.getTrackInfo(x)
+						description = i.getDescription();
+						if description.find("AC3") != -1:
+							self.dolbyAvailable = True
+						if description.find("MP3") != -1:
+							self.mp3Available = True
+						if description.find("DTS") != -1:
+							self.DTSAvailable = True
+
+	def timerEvent(self):
+ 		if self.standby == False:
+			disptype = config.plugins.vfdicon.displayshow.value
+		else:
+			disptype = config.plugins.vfdicon.stbshow.value
+		self.writeDate(disptype)
+
+	def writeDate(self, disp): #TODO: replace with case
+		if disp == "date" or disp == "day_date" or disp == "time" or disp == "time_date" or disp == "nothing":
+			tm = localtime()
+			if disp == "day_date":
+				date = strftime("%a", tm)[0:2] + strftime(" %d-%m-%y", tm)
+			elif disp == "date":
+				date = strftime("%d-%m-%y", tm) 
+			elif disp == "time_date":
+				date = strftime("%d-%m %H:%M", tm) 
+			elif disp == "time":
+				date = strftime("    %H:%M:%S", tm)
+			elif disp == "nothing":
+				date = ("            ")
+			evfd.getInstance().vfd_write_string(date[0:12])
+
+	def onLeaveStandby(self):
+		self.standby = False
+		global DisplayType
+		self.timer.stop() # stop one second timer
+		evfd.getInstance().vfd_write_string("           ")
+		self.timer.start(60000, False) # start one minute timer
+		print "[VFD-Icons] minute timer started"
+		if DisplayType == 5:
+			evfd.getInstance().vfd_set_brightness(config.plugins.vfdicon.contrast.value)
+			print "[VFD-Icons] set brightness", config.plugins.vfdicon.contrast.value
+			self.timerEvent()
+			b = str(config.plugins.vfdicon.ledbright.value)
+			c = str(config.plugins.vfdicon.crossbright.value)
+			Console().ePopen("fp_control -l 0 0 -l 1 " + b + " -l 4 " + c + " -l 5 " + c + " -l 6 " + c + " -l 7 " + c) #Red LED off, cross and blue on
+
+	def onEnterStandby(self, configElement):
+		from Screens.Standby import inStandby
+		inStandby.onClose.append(self.onLeaveStandby)
+		global DisplayType
+		if DisplayType == 5:
+			print "[VFD-Icons] set display & icons on Enter Standby"
+			if config.plugins.vfdicon.stbshow.value == "nothing":
+				evfd.getInstance().vfd_set_light(0)
+			else:
+				evfd.getInstance().vfd_set_brightness(config.plugins.vfdicon.stbcontrast.value)
+			print "[VFD-Icons] set standby brightness", config.plugins.vfdicon.stbcontrast.value
+			if config.plugins.vfdicon.standbyredledon.value:
+				Console().ePopen("fp_control -l 0 " + str(config.plugins.vfdicon.standbyredledon.value) + " -l 1 0 -l 4 0 -l 5 0 -l 6 0 -l 7 0") #Red LED on, cross off
+		if (config.plugins.vfdicon.stbshow.value == "time" or config.plugins.vfdicon.stbshow.value == "time_date"):
+			self.timer.stop() # stop minute timer
+			self.timer.start(999, False) # start one second timer
+			print "[VFD-Icons] second timer started"
+		if (config.plugins.vfdicon.stbshow.value == "date" or config.plugins.vfdicon.stbshow.value == "day_date" or config.plugins.vfdicon.stbshow.value == "time" or config.plugins.vfdicon.stbshow.value == "time_date"):
+			self.writeDate(config.plugins.vfdicon.stbshow.value)
+		else:
+			evfd.getInstance().vfd_clear_string()
+		self.standby = True
+
+VFDIconsInstance = None
+
+def main(session, **kwargs):
+	global VFDIconsInstance
+	global DisplayType
+	global hddUsed
+	if VFDIconsInstance is None:
+		VFDIconsInstance = VFDIcons(session)
+	if DisplayType == 5:
+		if (config.plugins.vfdicon.displayshow.value == "date" or config.plugins.vfdicon.displayshow.value == "day_date"
+			or config.plugins.vfdicon.displayshow.value == "time" or config.plugins.vfdicon.displayshow.value == "time_date"):
+			sleep(1)
+			VFDIconsInstance.timerEvent()
+		VFDIconsInstance.UpdatedInfo()
+	else:
+		VFDIconsInstance.writeName()
+
+def Plugins(**kwargs):
+	l = [PluginDescriptor(
+		name = _("VFD display"),
+		description = _("VFD display configuration"),
+		where = PluginDescriptor.WHERE_MENU,
+		fnc = VFDdisplaymenu),
+		PluginDescriptor(
+		name = _("VFD-Icons"),
+		description = _("VFD-Icons for Fortis HS8200"),
+		where = PluginDescriptor.WHERE_SESSIONSTART,
+		fnc = main)]
+	if config.plugins.vfdicon.extMenu.value:
+		l.append(PluginDescriptor(
+			name = _("VFD display"),
+			description = _("VFD configuration for Fortis HS8200"),
+			where = PluginDescriptor.WHERE_PLUGINMENU,
+			icon = _("vfddisplay.png"),
+			fnc = opencfg))
+	return l
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs8200VFD/meta/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/hs8200VFD/meta/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs8200VFD/meta/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs8200VFD/meta/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,3 @@
+installdir = $(datadir)/meta
+
+dist_install_DATA = plugin_vfd-icons.xml
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs8200VFD/meta/plugin_vfd-icons.xml enigma2-nightly/lib/python/Plugins/Extensions/hs8200VFD/meta/plugin_vfd-icons.xml
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs8200VFD/meta/plugin_vfd-icons.xml	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs8200VFD/meta/plugin_vfd-icons.xml	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,20 @@
+<default>
+	<prerequisites>
+		<hardware type="hs8200" />
+		<tag type="System" />
+	</prerequisites>
+	<info>
+		<author>Audioniek/Team Ducktales</author>
+		<name>VFD-Icons</name>
+		<packagename>enigma2-plugin-extensions-vfd-icons</packagename>
+		<packagetype>public</packagetype> <!-- internal/public , public is default, internal metas are not displayed inside plugin manager -->
+		<shortdescription>Displays text and icons on vfd</shortdescription>
+		<description>Displays text and icons on vfd.
+		</description>
+	</info>
+
+	<files type="package"> <!-- without version, without .ipk -->
+		<file type="package" name="enigma2-plugin-extensions-hs8200VFD" />
+	</files>
+
+</default>
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs8200VFD/locale/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/hs8200VFD/locale/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs8200VFD/locale/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs8200VFD/locale/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,3 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/hs8200VFD/locale
+
+SUBDIRS = nl
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs8200VFD/locale/nl/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/hs8200VFD/locale/nl/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs8200VFD/locale/nl/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs8200VFD/locale/nl/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,3 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/hs8200VFD/locale/nl
+
+SUBDIRS = LC_MESSAGES
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs8200VFD/locale/nl/LC_MESSAGES/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/hs8200VFD/locale/nl/LC_MESSAGES/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs8200VFD/locale/nl/LC_MESSAGES/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs8200VFD/locale/nl/LC_MESSAGES/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,10 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/hs8200VFD/locale/nl/LC_MESSAGES
+
+.po.mo:
+	$(MSGFMT) -o $@ $<
+
+BUILT_SOURCES = VFD-Icons.mo
+
+dist_install_DATA = \
+	VFD-Icons.po \
+	VFD-Icons.mo
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs8200VFD/locale/nl/LC_MESSAGES/VFD-Icons.po Extensions/hs8200VFD/locale/nl/LC_MESSAGES/VFD-Icons.po
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs8200VFD/locale/nl/LC_MESSAGES/VFD-Icons.po	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs8200VFD/locale/nl/LC_MESSAGES/VFD-Icons.po	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,115 @@
+msgid ""
+msgstr ""
+"Project-Id-Version: VFD-Icons for Fortis HS8200\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2013-07-17 20:30+0100\n"
+"PO-Revision-Date: 2014-02-08 23:24+0100\n"
+"Last-Translator: Audioniek\n"
+"Language-Team: \n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"X-Generator: Poedit 1.5.4\n"
+"Language: \n"
+"X-Poedit-SourceCharset: UTF-8\n"
+"X-Poedit-Language: Dutch\n"
+"X-Poedit-Country: NETHERLANDS\n"
+
+msgid "channel number"
+msgstr "zendernummer"
+
+msgid "channel name"
+msgstr "zendernaam"
+
+msgid "channel number and name"
+msgstr "zendernummer en -naam"
+
+msgid "date"
+msgstr "datum"
+
+msgid "day and date"
+msgstr "dag en datum"
+
+msgid "blank"
+msgstr "geen"
+
+msgid "nothing"
+msgstr "blanco display"
+
+msgid "time"
+msgstr "tijd"
+
+msgid "time and date"
+msgstr "tijd en datum"
+
+msgid "time, day and date"
+msgstr "tijd, dag en datum"
+
+msgid "once"
+msgstr "éénmaal"
+
+msgid "continuous"
+msgstr "voortdurend"
+
+msgid "all"
+msgstr "alle"
+
+msgid "partial"
+msgstr "gedeeltelijk"
+
+msgid "none"
+msgstr "geen"
+
+msgid "Stby LED brightness"
+msgstr "LED helderheid stby"
+
+msgid "Blue LED brightness"
+msgstr "Blauwe LED helderh."
+
+msgid "Cross brightness"
+msgstr "Helderheid stuurkruis"
+
+msgid "yes"
+msgstr "ja"
+
+msgid "VFD display configuration"
+msgstr "VFD displayinstellingen"
+
+msgid "Cancel"
+msgstr "Annuleren"
+
+msgid "OK"
+msgstr "Bevestigen"
+
+msgid "Show on VFD display"
+msgstr "Info op VFD display"
+
+msgid "Show on VFD display in standby"
+msgstr "Info op VFD display in standby"
+
+msgid "VFD brightness"
+msgstr "VFD helderheid"
+
+msgid "Standby brightness"
+msgstr "Helderheid in standby"
+
+msgid "Uppercase letters only"
+msgstr "Alleen hoofdletters"
+
+msgid "Scroll text"
+msgstr "Tekst scrollen"
+
+msgid "Center text"
+msgstr "Tekst centreren"
+
+msgid "Show icons"
+msgstr "Toon iconen"
+
+msgid "Show this plugin in plugin menu"
+msgstr "Toon deze plugin in het Applicatie-menu"
+
+msgid "VFD SETUP"
+msgstr "VFD INSTELLINGEN"
+
+msgid "VFD configuration for Fortis HS8200"
+msgstr "VFD displayinstellingen voor Fortis HS8200"
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs9510VFD/__init__.py enigma2-nightly/lib/python/Plugins/Extensions/hs9510VFD/__init__.py
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs9510VFD/__init__.py	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs9510VFD/__init__.py	2012-03-08 20:35:00.000000000 +0100
@@ -0,0 +1,2 @@
+
+
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs9510VFD/vfddisplay.png enigma2-nightly/lib/python/Plugins/Extensions/hs9510VFD/vfddisplay.png
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs9510VFD/vfddisplay.png	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs9510VFD/vfddisplay.png	2012-03-08 20:35:00.000000000 +0100
@@ -0,0 +1,2 @@
+
+
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs9510VFD/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/hs9510VFD/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs9510VFD/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs9510VFD/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,10 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/hs9510VFD
+
+SUBDIRS = locale meta
+
+install_PYTHON = \
+	__init__.py \
+	plugin.py
+
+dist_install_DATA = \
+	vfddisplay.png
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs9510VFD/plugin.py enigma2-nightly/lib/python/Plugins/Extensions/hs9510VFD/plugin.py
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs9510VFD/plugin.py	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs9510VFD/plugin.py	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,642 @@
+# -*- coding: utf-8 -*-
+from Plugins.Plugin import PluginDescriptor
+from ServiceReference import ServiceReference
+from Components.ServiceList import ServiceList
+from enigma import iPlayableService, iServiceInformation, iTimeshiftServicePtr, iRecordableService, eTimer, evfd, eDVBVolumecontrol, iFrontendInformation
+from time import localtime, strftime, sleep
+from Components.ServiceEventTracker import ServiceEventTracker
+from Components.Console import Console
+from Tools.Directories import fileExists, resolveFilename, SCOPE_LANGUAGE, SCOPE_PLUGINS
+from os import environ, statvfs
+from Components.ActionMap import ActionMap
+from Components.config import *
+from Components.ConfigList import ConfigList, ConfigListScreen
+from Components.Language import language
+from Components.Sources.StaticText import StaticText
+from Tools.HardwareInfo import HardwareInfo
+from Screens.Screen import Screen
+import gettext
+#Version 140114.1
+stb = HardwareInfo().get_device_name()
+lang = language.getLanguage()
+environ['LANGUAGE'] = lang[:2]
+gettext.bindtextdomain('enigma2', resolveFilename(SCOPE_LANGUAGE))
+gettext.textdomain('enigma2')
+gettext.bindtextdomain('VFD-Icons', '%s%s' % (resolveFilename(SCOPE_PLUGINS), 'SystemPlugins/VFD-Icons/locale/'))
+
+def _(txt):
+	t = gettext.dgettext('VFD-Icons', txt)
+	if t == txt:
+		t = gettext.gettext(txt)
+	return t
+
+def translateBlock(block):
+	for x in TranslationHelper:
+		if block.__contains__(x[0]):
+			block = block.replace(x[0], x[1])
+	return block
+
+try:
+	DisplayType = evfd.getInstance().getVfdType()
+	if DisplayType != 7:
+		DisplayType = None
+except:
+	DisplayType = None
+DisplayTypevfd = DisplayType
+
+if DisplayTypevfd is None:
+	if stb.lower() == 'octagon1008':
+		DisplayType = 7
+	else:
+		DisplayType = None
+
+config.plugins.vfdicon = ConfigSubsection()
+config.plugins.vfdicon.displayshow = ConfigSelection(default = "channel",
+	choices = [
+		("nothing", _("blank")),
+		("channel number", _("channel number")),
+		("channel", _("channel name")),
+		("channel namenumber", _("channel number and name")),
+		("date", _("date")),
+		("day_date", _("day and date"))
+		])
+config.plugins.vfdicon.stbshow = ConfigSelection(default = "time",
+	choices = [
+		("nothing", _("nothing")),
+		("time", _("time")),
+		("date", _("date")),
+		("day_date", _("day and date"))
+		])
+config.plugins.vfdicon.contrast = ConfigSlider(default=4, limits=(0, 7))
+config.plugins.vfdicon.stbcontrast = ConfigSlider(default=2, limits=(0, 7))
+config.plugins.vfdicon.uppercase = ConfigYesNo(default=True)
+config.plugins.vfdicon.textscroll = ConfigSelection(default = "1",
+	choices = [
+		("0", _("no")),
+		("1", _("once")),
+		("2", _("continuous"))
+		])
+config.plugins.vfdicon.textcenter = ConfigSelection(default = "0",
+	choices = [
+		("0", _("no")),
+		("1", _("yes"))
+		])
+config.plugins.vfdicon.showicons = ConfigSelection(default = "all",
+	choices = [
+		("none", _("none")),
+		("partial", _("partial")),
+		("all", _("all"))
+		])
+config.plugins.vfdicon.standbyredledon = ConfigSlider(default=0, limits=(0, 7))
+#config.plugins.vfdicon.dstandbyredledon = ConfigSlider(default=7, limits=(0, 7))
+config.plugins.vfdicon.recredledon = ConfigSlider(default=2, limits=(0, 7))
+config.plugins.vfdicon.extMenu = ConfigYesNo(default=True)
+
+class ConfigVFDDisplay(Screen, ConfigListScreen):
+	def __init__(self, session):
+		self.icons_showicons = None
+		Screen.__init__(self, session)
+		self.skinName = ["Setup"]
+		self["key_red"] = StaticText(_("Cancel"))
+		self["key_green"] = StaticText(_("OK"))
+		self["actions"] = ActionMap(["OkCancelActions", "DirectionActions", "SetupActions", "ColorActions"],
+			{
+				'left': self.keyLeft,
+				'down': self.keyDown,
+				'up': self.keyUp,
+				'right': self.keyRight,
+				"cancel": self.cancel,
+				"ok": self.keySave,
+				"green": self.keySave,
+				"red": self.cancel,
+			}, -2)
+		self.cfglist = []
+		ConfigListScreen.__init__(self, self.cfglist, session = session)
+		self.setTitle(_("VFD display configuration"))
+		self.createSetup()
+
+	def createSetup(self):
+		self.cfglist = []
+		self.cfglist.append(getConfigListEntry(_("Show on VFD display"), config.plugins.vfdicon.displayshow))
+		self.cfglist.append(getConfigListEntry(_("Show on VFD display in standby"), config.plugins.vfdicon.stbshow))
+		if DisplayType == 7:
+			self.cfglist.append(getConfigListEntry(_("VFD brightness"), config.plugins.vfdicon.contrast))
+			self.cfglist.append(getConfigListEntry(_("Standby brightness"), config.plugins.vfdicon.stbcontrast))
+		self.cfglist.append(getConfigListEntry(_("Uppercase letters only"), config.plugins.vfdicon.uppercase))
+		self.cfglist.append(getConfigListEntry(_("Scroll text"), config.plugins.vfdicon.textscroll))
+		self.cfglist.append(getConfigListEntry(_("Center text"), config.plugins.vfdicon.textcenter))
+		self.cfglist.append(getConfigListEntry(_("Show icons"), config.plugins.vfdicon.showicons))
+		self.icons_showicons = config.plugins.vfdicon.showicons.value
+		self.cfglist.append(getConfigListEntry(_('Stby LED brightness'), config.plugins.vfdicon.standbyredledon))
+#		self.cfglist.append(getConfigListEntry(_('Deepstby LED brightness'), config.plugins.vfdicon.dstandbyredledon))
+		self.cfglist.append(getConfigListEntry(_('Rec LED brightness'), config.plugins.vfdicon.recredledon))
+	        self.cfglist.append(getConfigListEntry(_('Show this plugin in plugin menu'), config.plugins.vfdicon.extMenu))
+		self["config"].list = self.cfglist
+		self["config"].l.setList(self.cfglist)
+
+	def newConfig(self):
+		global DisplayType
+		if DisplayType == 7:
+			if self["config"].getCurrent()[1] == config.plugins.vfdicon.stbcontrast:
+				Console().ePopen("fp_control -b " + str(config.plugins.vfdicon.stbcontrast.value))
+			elif self["config"].getCurrent()[1] == config.plugins.vfdicon.standbyredledon:
+				Console().ePopen("fp_control -l 0 " + str(config.plugins.vfdicon.standbyredledon.value))
+#			elif self["config"].getCurrent()[1] == config.plugins.vfdicon.dstandbyredledon:
+#				Console().ePopen("fp_control -l 0 " + str(config.plugins.vfdicon.dstandbyredledon.value))
+			elif self["config"].getCurrent()[1] == config.plugins.vfdicon.recredledon:
+				Console().ePopen("fp_control -l 0 " + str(config.plugins.vfdicon.recredledon.value))
+			else:
+				Console().ePopen("fp_control -b " + str(config.plugins.vfdicon.contrast.value))
+				print ""
+				Console().ePopen("fp_control -l 0 0")
+		print "newConfig", self["config"].getCurrent()
+		self.createSetup()
+
+	def cancel(self):
+		main(self)
+		Console().ePopen("fp_control -l 0 0")
+		ConfigListScreen.keyCancel(self)
+
+	def keySave(self):
+		global DisplayType
+		if DisplayType == 7:
+			Console().ePopen("fp_control -l 0 0")
+			print "[VFD-Icons] set brightness", config.plugins.vfdicon.contrast.value
+			Console().ePopen("fp_control -b " + str(config.plugins.vfdicon.contrast.value))
+		if config.plugins.vfdicon.textscroll.value is not None:
+			evfd.getInstance().vfd_set_SCROLL(int(config.plugins.vfdicon.textscroll.value))
+		else:
+			evfd.getInstance().vfd_set_SCROLL(1)
+		print "[VFD-Icons] set text scroll", config.plugins.vfdicon.textscroll.value
+		if config.plugins.vfdicon.textcenter.value == "1":
+			evfd.getInstance().vfd_set_CENTER(True)
+		else:
+			evfd.getInstance().vfd_set_CENTER(False)
+		print "[VFD-Icons] set text centering", config.plugins.vfdicon.textcenter.value
+		main(self)
+		ConfigListScreen.keySave(self)
+
+	def keyLeft(self):
+		self["config"].handleKey(KEY_LEFT)
+		self.newConfig()
+
+	def keyRight(self):
+		self["config"].handleKey(KEY_RIGHT)
+		self.newConfig()
+
+	def keyDown(self):
+		self['config'].instance.moveSelection(self['config'].instance.moveDown)
+		self.newConfig()
+
+	def keyUp(self):
+		self['config'].instance.moveSelection(self['config'].instance.moveUp)
+		self.newConfig()
+
+def opencfg(session, **kwargs):
+		session.open(ConfigVFDDisplay)
+		evfd.getInstance().vfd_write_string( "VFD SETUP" )
+
+def VFDdisplaymenu(menuid, **kwargs):
+	if menuid == "system":
+		return [(_("VFD display"), opencfg, "vfd_display", 44)]
+	else:
+		return []
+
+class VFDIcons:
+	def __init__(self, session):
+		self.session = session
+		self.onClose = []
+		print '[VFD-Icons] Start'
+		self.tuned = False
+		self.play = False
+		self.record = False
+		self.timeshift = False
+		self.standby = False
+		self.usb = 0
+		self.dolbyAvailable = False
+		self.mp3Available = False
+		self.DTSAvailable = False
+		self.timer = eTimer()
+		self.timer.callback.append(self.timerEvent)
+		self.timer.start(60000, False) # start one minute timer
+		Console().ePopen("fp_control -i 29 0")
+		Console().ePopen("fp_control -l 0 0")
+		global DisplayType
+		print '[VFD-Icons] Hardware displaytype:', DisplayType
+		print '[VFD-Icons] VFD displaytype     :', DisplayTypevfd
+		if DisplayType == 7:
+			self.__event_tracker = ServiceEventTracker(screen = self,eventmap =
+				{
+					iPlayableService.evUpdatedInfo: self.UpdatedInfo,
+					iPlayableService.evUpdatedEventInfo: self.__evUpdatedEventInfo,
+					iPlayableService.evVideoSizeChanged: self.__evVideoSizeChanged,
+					iPlayableService.evSeekableStatusChanged: self.__evSeekableStatusChanged,
+					iPlayableService.evTunedIn: self.__evTunedIn,
+					iPlayableService.evTuneFailed: self.__evTuneFailed,
+					iPlayableService.evStart: self.__evStart
+				})
+			config.misc.standbyCounter.addNotifier(self.onEnterStandby, initial_call = False)
+			session.nav.record_event.append(self.gotRecordEvent)
+			try:
+				from Plugins.SystemPlugins.Hotplug.plugin import hotplugNotifier
+				hotplugNotifier.append(self.hotplugCB)
+			except:
+				pass
+			self.dir = None
+			self.mount = None
+			self.firstmount = -1
+			global hddUsed
+			hddUsed = -1
+			self.SetMount()
+			if self.mount:
+				self.firstmount = self.mount
+			if self.standby == False:
+				self.displayHddUsed()
+		else:
+			self.__event_tracker = ServiceEventTracker(screen = self,eventmap =
+				{
+					iPlayableService.evStart: self.writeName,
+				})
+		print '[VFD-Icons] Set text scrolling option'
+		if config.plugins.vfdicon.textscroll.value is not None:
+			evfd.getInstance().vfd_set_SCROLL(int(config.plugins.vfdicon.textscroll.value))
+		else:
+			evfd.getInstance().vfd_set_SCROLL(1)
+		print "[VFD-Icons] Set text centering option"
+		if config.plugins.vfdicon.textcenter.value == "1":
+			evfd.getInstance().vfd_set_CENTER(True)
+		else:
+			evfd.getInstance().vfd_set_CENTER(False)
+		print '[VFD-Icons] End initialisation'
+
+	def __evStart(self):
+		print '[VFD-Icons] __evStart'
+		self.__evSeekableStatusChanged()
+
+	def __evUpdatedEventInfo(self):
+		print '[VFD-Icons] __evUpdatedEventInfo'
+#		... and do nothing else
+
+	def UpdatedInfo(self):
+		print '[VFD-Icons] __evUpdatedInfo'
+		self.checkAudioTracks()
+		self.writeName()
+		self.showDTS()
+		if DisplayType == 7:
+			self.showCrypted()
+			self.showDolby()
+			self.showTuned()
+			self.showMute()
+
+	def writeName(self):
+		if config.plugins.vfdicon.displayshow.value != "date" and config.plugins.vfdicon.displayshow.value != "day_date":
+			servicename = "        "
+			if config.plugins.vfdicon.displayshow.value != "nothing":
+				service = self.session.nav.getCurrentlyPlayingServiceOrGroup()
+				if service:
+					path = service.getPath()
+					if path:
+						self.play = True
+						servicename = "PLAY"
+						currPlay = self.session.nav.getCurrentService()
+						if currPlay != None and self.mp3Available: # show the MP3 tag
+							servicename = currPlay.info().getInfoString(iServiceInformation.sTagTitle) + " - " + currPlay.info().getInfoString(iServiceInformation.sTagArtist)
+							Console().ePopen("fp_control -i 4 1 -i 3 0") #AUDIO icon on, DVB, VIDEO off
+						else: # show the file name
+							self.service = self.session.nav.getCurrentlyPlayingServiceReference()
+							if not self.service is None:
+								service = self.service.toCompareString()
+								servicename = ServiceReference(service).getServiceName().replace('\xc2\x87', '').replace('\xc2\x86', '').ljust(16)
+								Console().ePopen("fp_control -i 3 1 -i 4 0") #VIDEO icon on, DVB, AUDIO off
+						Console().ePopen("fp_control -i 19 1") #play
+					else:
+						if config.plugins.vfdicon.displayshow.value == "channel number": #show the channel number
+							servicename = str(service.getChannelNum())
+							if len(servicename) == 1:
+								servicename = '000' + servicename
+							elif len(servicename) == 2:
+								servicename = '00' + servicename
+							elif len(servicename) == 3:
+								servicename = '0' + servicename
+						elif config.plugins.vfdicon.displayshow.value == "channel namenumber": #show the channel number & name
+							servicename = str(service.getChannelNum()) + ' ' + ServiceReference(service).getServiceName()
+						else:
+							servicename = ServiceReference(service).getServiceName() #show the channel name
+						Console().ePopen("fp_control -i 19 0") #play
+						self.play = False
+						#evaluate radio or tv
+						if config.plugins.vfdicon.showicons.value == "all":
+							if config.servicelist.lastmode.value == 'tv':
+								Console().ePopen("fp_control -i 3 1 -i 4 0") #DVB, VIDEO icon on, AUDIO off
+							else:
+								Console().ePopen("fp_control -i 4 1 -i 3 0") #DVB, AUDIO icon on, VIDEO off
+			if config.plugins.vfdicon.uppercase.value == True:
+				servicename = servicename.upper()
+			servicename = servicename.replace('  ', ' ')
+			evfd.getInstance().vfd_write_string(servicename[0:63])
+
+	def showCrypted(self):
+		if config.plugins.vfdicon.showicons.value != "none":
+			service = self.session.nav.getCurrentService()
+			if service:
+				info = service.info()
+				crypted = info.getInfo(iServiceInformation.sIsCrypted)
+				if crypted == 1:
+					Console().ePopen("fp_control -i 18 1") #Euro icon
+				else:
+					Console().ePopen("fp_control -i 18 0")
+
+	def checkAudioTracks(self):
+		self.dolbyAvailable = False
+		self.mp3Available = False
+		self.DTSAvailable = False
+		if config.plugins.vfdicon.showicons.value != "none":
+			service = self.session.nav.getCurrentService()
+			if service:
+				audio = service.audioTracks()
+				if audio:
+					n = audio.getNumberOfTracks()
+					for x in range(n):
+						i = audio.getTrackInfo(x)
+						description = i.getDescription();
+						if description.find("AC3") != -1:
+							self.dolbyAvailable = True
+						if description.find("MP3") != -1:
+							self.mp3Available = True
+						if description.find("DTS") != -1:
+							self.DTSAvailable = True
+
+	def showDolby(self):
+		if self.dolbyAvailable:
+			Console().ePopen("fp_control -i 1 1") #Dolby
+		else:
+			Console().ePopen("fp_control -i 1 0")
+
+	def showDTS(self):
+		if self.DTSAvailable:
+			Console().ePopen("fp_control -i 2 1") #DTS
+		else:
+			Console().ePopen("fp_control -i 2 0")
+
+	def showTuned(self):
+		if config.plugins.vfdicon.showicons.value == "all":
+			if self.tuned == True:
+				service = self.session.nav.getCurrentService()
+				if service is not None and self.play == False:
+					info = service.info()
+					Console().ePopen("fp_control -i 8 1") #DVB on
+			else:
+				Console().ePopen("fp_control -i 8 0")
+
+	def showTimer(self):
+		if config.plugins.vfdicon.showicons.value == "all":
+			# check if timers are set
+			next_rec_time = -1
+			next_rec_time = self.session.nav.RecordTimer.getNextRecordingTime()
+			if next_rec_time > 0:
+				Console().ePopen("fp_control -i 11 1") #Timer
+			else:
+				Console().ePopen("fp_control -i 11 0")
+
+	def timerEvent(self):
+		self.showTimer() #update timer icon
+#		if (self.record == True and config.plugins.vfdicon.recredledon.value != 0):
+		if self.record == True:
+			Console().ePopen("fp_control -l 0 " + str(config.plugins.vfdicon.recredledon.value))
+ 		if self.standby == False:
+			if self.record == False and self.timeshift == False:
+				disptype = config.plugins.vfdicon.displayshow.value
+		else:
+			disptype = config.plugins.vfdicon.stbshow.value
+			self.writeDate(disptype)
+
+	def __evVideoSizeChanged(self):
+		if config.plugins.vfdicon.showicons.value != "none":
+			service = self.session.nav.getCurrentService()
+			if service:
+				info = service.info()
+				aspect = info.getInfo(iServiceInformation.sAspect)
+				if aspect in (1,2,5,6,9,10,13,14):
+					Console().ePopen("fp_control -i 16 0")
+				else:
+					Console().ePopen("fp_control -i 16 1") #set 16:9 icon
+
+	def __evSeekableStatusChanged(self):
+		if config.plugins.vfdicon.showicons.value == "all":
+			service = self.session.nav.getCurrentService()
+			if service:
+				if self.play == False:
+					ts = service and service.timeshift()
+#					if ts and ts.isTimeshiftEnabled() > 0:
+					if ts and ts.isTimeshiftActive() > 0:
+						self.timeshift = True
+						Console().ePopen("fp_control -i 10 1") #Time
+					else:
+						self.timeshift = False
+						Console().ePopen("fp_control -i 10 0") #Time icon off
+
+	def gotRecordEvent(self, service, event):
+		if config.plugins.vfdicon.showicons.value != 'none':
+			if event in (iRecordableService.evEnd, iRecordableService.evStart, None):
+				recs = self.session.nav.getRecordings()
+				nrecs = len(recs)
+				if nrecs > 1: #two or more recordings active
+					self.record = True
+					Console().ePopen("fp_control -i 24 1 -i 13 1 -i 14 1") #REC, 1+2 on
+				elif nrecs > 0: #one recording active
+					self.record = True
+					Console().ePopen("fp_control -i 24 1 -i 13 1 -i 14 0") #REC, 1 on, 2 off
+				else: # no recording active
+					Console().ePopen("fp_control -i 24 0 -i 13 0 -i 14 0 -l 0 0") #REC, 1, 2 & LED off
+					self.RecordEnd()
+
+	def RecordEnd(self):
+		if self.record:
+			self.record = False
+			self.session.nav.record_event.remove(self.gotRecordEvent)
+			self.showTimer() #update timer icon
+
+	def writeDate(self, disp):
+		tm = localtime()
+		if disp == "day_date":
+			date = strftime("%a", tm)[0:2] + strftime(" %d-%m", tm)
+			Console().ePopen("fp_control -i 27 0 -i 28 0") # colons off
+		elif disp == "date":
+			date = strftime("%d-%m-", tm) + strftime("%y", tm)[0:2] 
+			Console().ePopen("fp_control -i 27 0 -i 28 0") # colons off
+		else:
+			date = strftime("%H%M%S", tm)
+			Console().ePopen("fp_control -i 27 1 -i 28 1") # colons on
+		evfd.getInstance().vfd_write_string(date[0:8])
+
+	def __evTunedIn(self):
+		self.tuned = True
+		Console().ePopen("fp_control -i 8 0") #DVB off
+
+	def __evTuneFailed(self):
+		self.tuned = False
+
+	def onLeaveStandby(self):
+		self.standby = False
+		global DisplayType
+		Console().ePopen("fp_control -i 27 0 -i 28 0") # colons off
+		evfd.getInstance().vfd_write_string("       ")
+		self.timer.stop() # stop one second timer
+		self.timer.start(60000, False) # start one minute timer
+		if DisplayType == 7:
+			evfd.getInstance().vfd_set_brightness(config.plugins.vfdicon.contrast.value)
+			print "[VFD-Icons] set brightness", config.plugins.vfdicon.contrast.value
+			self.timerEvent()
+			Console().ePopen("fp_control -l 0 0") # LED off
+			if config.plugins.vfdicon.showicons.value == "all":
+				global hddUsed
+				hddUsed = -1 #force hdd display
+				self.displayHddUsed()
+				if self.usb == 1:
+					Console().ePopen("fp_control -i 17 1") #USB
+				else:
+					Console().ePopen("fp_control -i 17 0")
+			print "[VFD-Icons] set icons on Leave Standby"
+
+	def onEnterStandby(self, configElement):
+		from Screens.Standby import inStandby
+		inStandby.onClose.append(self.onLeaveStandby)
+		global DisplayType
+		if DisplayType == 7:
+			Console().ePopen("fp_control -i 29 0") #clear all VFD icons
+#			Console().ePopen("fp_control -i 36 1") #Standby
+			if config.plugins.vfdicon.stbshow.value == "nothing":
+				evfd.getInstance().vfd_set_light(0)
+			else:
+				evfd.getInstance().vfd_set_brightness(config.plugins.vfdicon.stbcontrast.value)
+			print "[VFD-Icons] set standby brightness", config.plugins.vfdicon.stbcontrast.value
+			if config.plugins.vfdicon.standbyredledon.value:
+				Console().ePopen("fp_control -l 0 " + str(config.plugins.vfdicon.standbyredledon.value)) #Red LED on
+		if config.plugins.vfdicon.stbshow.value == "time":
+			self.timer.stop() # stop minute timer
+			self.timer.start(999, False) # start one second timer
+		if config.plugins.vfdicon.stbshow.value == "date" or config.plugins.vfdicon.stbshow.value == "day_date" or config.plugins.vfdicon.stbshow.value == "time":
+			self.writeDate(config.plugins.vfdicon.stbshow.value)
+		else:
+			evfd.getInstance().vfd_clear_string()
+		self.standby = True
+		print "[VFD-Icons] set display & icons on Enter Standby"
+
+	def hotplugCB(self, dev, media_state):
+		if config.plugins.vfdicon.showicons.value == "all":
+			if dev.__contains__('sda') or dev.__contains__('sdb') or dev.__contains__('sdc'):
+#				if media_state == "add" or media_state == "change":
+				if media_state == "add":
+					Console().ePopen("fp_control -i 17 1")
+					self.usb = 1
+					self.displayHddUsedOff() # signal hot plug
+					self.mount = None # force remount
+					self.SetMount() # determine mount
+					if self.firstmount == -1 and self.mount:
+						self.firstmount = self.mount
+					self.displayHddUsed() # and display icon
+				if media_state == "remove":
+					Console().ePopen("fp_control -i 17 0")
+					self.usb = 0
+					if self.firstmount != -1:
+						self.mount = self.firstmount
+					else:
+						self.mount = None
+#					if not self.mount:
+						self.displayHddUsedOff()
+
+	def SetMount(self):
+		dir = config.usage.instantrec_path.value[:-1]
+		if dir == "<default":
+			dir = config.usage.default_path.value[:-1]
+		if not self.mount or self.dir != dir:
+			if not self.mount:
+				self.dir = dir
+#				print "[VFD-Icons] SetMount", dir
+				self.mount = self.FindMountDir(dir)
+			if not self.mount:
+				self.mount = self.FindMountDir('/autofs/sdc1')
+			if not self.mount:
+				self.mount = self.FindMountDir('/autofs/sdb1')
+			if not self.mount:
+				self.mount = self.FindMountDir('/autofs/sda1')
+			if not self.mount:
+				self.mount = self.FindMountDir('/media/hdd')
+			if not self.mount:
+				self.mount = self.FindMountDir('/hdd')
+
+	def FindMountDir(self, dir):
+		mounts = open("/proc/mounts", 'r')
+		for line in mounts:
+			result = line.strip().split()
+			if result[1].startswith(dir):
+				mounts.close()
+				return result[1]
+		mounts.close()
+		return None
+
+	def FindMountDev(self, dev):
+		mounts = open("/proc/mounts", 'r')
+		for line in mounts:
+			result = line.strip().split()
+			if result[0].startswith(dev):
+				mounts.close()
+				return result[1]
+		mounts.close()
+		return None
+
+	def displayHddUsed(self):
+		global hddUsed
+		if config.plugins.vfdicon.showicons.value == "all":
+			if self.mount == None:
+				self.displayHddUsedOff() #HDD display off
+			else:
+				Console().ePopen("fp_control -i 6 1") #HDD on
+				print "[VFD-Icons] HDD mount point:", self.mount
+		else:
+			self.displayHddUsedOff()
+
+	def displayHddUsedOff(self): #switch off hdd icon
+		Console().ePopen("fp_control -i 6 0")
+
+VFDIconsInstance = None
+
+def main(session, **kwargs):
+	global VFDIconsInstance
+	global DisplayType
+	global hddUsed
+	if VFDIconsInstance is None:
+		VFDIconsInstance = VFDIcons(session)
+	if DisplayType == 7:
+		if config.plugins.vfdicon.displayshow.value == "date" or config.plugins.vfdicon.displayshow.value == "day_date" or config.plugins.vfdicon.displayshow.value == "time":
+			sleep(1)
+			VFDIconsInstance.timerEvent()
+		else:
+			if config.plugins.vfdicon.showicons.value == "none":
+				Console().ePopen("fp_control -i 29 0")		
+			else:
+				hddUsed = -1
+				VFDIconsInstance.displayHddUsed()
+		VFDIconsInstance.UpdatedInfo()
+	else:
+		VFDIconsInstance.writeName()
+
+def Plugins(**kwargs):
+	l = [PluginDescriptor(
+		name = _("VFD display"),
+		description = _("VFD display configuration"),
+		where = PluginDescriptor.WHERE_MENU,
+		fnc = VFDdisplaymenu),
+		PluginDescriptor(
+		name = _("VFD-Icons"),
+		description = _("VFD-Icons for Fortis HS9510"),
+		where = PluginDescriptor.WHERE_SESSIONSTART,
+		fnc = main)]
+	if config.plugins.vfdicon.extMenu.value:
+		l.append(PluginDescriptor(
+			name = _("VFD display"),
+			description = _("VFD display configuration for Fortis HS9510"),
+			where = PluginDescriptor.WHERE_PLUGINMENU,
+			icon = _("vfddisplay.png"),
+			fnc = opencfg))
+	return l
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs9510VFD/meta/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/hs9510VFD/meta/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs9510VFD/meta/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs9510VFD/meta/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,3 @@
+installdir = $(datadir)/meta
+
+dist_install_DATA = plugin_vfd-icons.xml
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs9510VFD/meta/plugin_vfd-icons.xml enigma2-nightly/lib/python/Plugins/Extensions/hs9510VFD/meta/plugin_vfd-icons.xml
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs9510VFD/meta/plugin_vfd-icons.xml	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs9510VFD/meta/plugin_vfd-icons.xml	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,20 @@
+<default>
+	<prerequisites>
+		<hardware type="HS9510" />
+		<tag type="System" />
+	</prerequisites>
+	<info>
+		<author>Audioniek/Team Ducktales</author>
+		<name>VFD-Icons</name>
+		<packagename>enigma2-plugin-systemplugins-vfd-icons</packagename>
+		<packagetype>public</packagetype> <!-- internal/public , public is default, internal metas are not displayed inside plugin manager -->
+		<shortdescription>Displays text and icons on vfd</shortdescription>
+		<description>Displays text and icons on vfd.
+		</description>
+	</info>
+
+	<files type="package"> <!-- without version, without .ipk -->
+		<file type="package" name="enigma2-plugin-extensions-HS9510VFD" />
+	</files>
+
+</default>
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs9510VFD/locale/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/hs9510VFD/locale/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs9510VFD/locale/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs9510VFD/locale/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,3 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/hs9510VFD/locale
+
+SUBDIRS = nl
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs9510VFD/locale/nl/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/hs9510VFD/locale/nl/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs9510VFD/locale/nl/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs9510VFD/locale/nl/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,3 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/hs9510VFD/locale/nl
+
+SUBDIRS = LC_MESSAGES
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs9510VFD/locale/nl/LC_MESSAGES/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/hs9510VFD/locale/nl/LC_MESSAGES/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs9510VFD/locale/nl/LC_MESSAGES/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs9510VFD/locale/nl/LC_MESSAGES/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,10 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/hs9510VFD/locale/nl/LC_MESSAGES
+
+.po.mo:
+	$(MSGFMT) -o $@ $<
+
+BUILT_SOURCES = VFD-Icons.mo
+
+dist_install_DATA = \
+	VFD-Icons.po \
+	VFD-Icons.mo
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs9510VFD/locale/nl/LC_MESSAGES/VFD-Icons.po enigma2-nightly/lib/python/Plugins/Extensions/hs9510VFD/locale/nl/LC_MESSAGES/VFD-Icons.po
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs9510VFD/locale/nl/LC_MESSAGES/VFD-Icons.po	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs9510VFD/locale/nl/LC_MESSAGES/VFD-Icons.po	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,118 @@
+msgid ""
+msgstr ""
+"Project-Id-Version: VFD-Icons for Fortis HS9510\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2013-07-17 20:30+0100\n"
+"PO-Revision-Date: 2013-09-18 14:24+0100\n"
+"Last-Translator: Audioniek\n"
+"Language-Team: \n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"X-Generator: Poedit 1.5.4\n"
+"Language: \n"
+"X-Poedit-SourceCharset: UTF-8\n"
+"X-Poedit-Language: Dutch\n"
+"X-Poedit-Country: NETHERLANDS\n"
+
+msgid "channel number"
+msgstr "zendernummer"
+
+msgid "channel name"
+msgstr "zendernaam"
+
+msgid "channel number and name"
+msgstr "zendernummer en -naam"
+
+msgid "date"
+msgstr "datum"
+
+msgid "day and date"
+msgstr "dag en datum"
+
+msgid "blank"
+msgstr "geen"
+
+msgid "nothing"
+msgstr "blanco display"
+
+msgid "time"
+msgstr "tijd"
+
+msgid "time and date"
+msgstr "tijd en datum"
+
+msgid "time, day and date"
+msgstr "tijd, dag en datum"
+
+msgid "once"
+msgstr "één keer"
+
+msgid "continuous"
+msgstr "voortdurend"
+
+msgid "all"
+msgstr "alle"
+
+msgid "partial"
+msgstr "gedeeltelijk"
+
+msgid "none"
+msgstr "geen"
+
+msgid "yes"
+msgstr "ja"
+
+msgid "blink"
+msgstr "knipperen"
+
+msgid "on"
+msgstr "aan"
+
+msgid "VFD display configuration"
+msgstr "VFD displayinstellingen"
+
+msgid "Cancel"
+msgstr "Annuleren"
+
+msgid "OK"
+msgstr "Bevestigen"
+
+msgid "Show on VFD display"
+msgstr "Info op VFD display"
+
+msgid "Show on VFD display in standby"
+msgstr "Info op VFD display in standby"
+
+msgid "VFD brightness"
+msgstr "VFD helderheid"
+
+msgid "Standby brightness"
+msgstr "Helderheid in standby"
+
+msgid "Uppercase letters only"
+msgstr "Alleen hoofdletters"
+
+msgid "Scroll text"
+msgstr "Tekst scrollen"
+
+msgid "Center text"
+msgstr "Tekst centreren"
+
+msgid "Show icons"
+msgstr "Toon iconen"
+
+msgid "Stby LED brightness"
+msgstr "LED helderheid stby"
+
+msgid "Rec LED brightness"
+msgstr "LED helderheid opn."
+
+msgid "Show this plugin in plugin menu"
+msgstr "Toon deze plugin in het Applicatie-menu"
+
+msgid "VFD SETUP"
+msgstr "VFD-instellingen"
+
+msgid "VFD display configuration for Fortis HS9510"
+msgstr "VFD displayinstellingen voor Fortis HS9510"
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs7810aVFD/__init__.py enigma2-nightly/lib/python/Plugins/Extensions/hs7810aVFD/__init__.py
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs7810aVFD/__init__.py	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs7810aVFD/__init__.py	2012-03-08 20:35:00.000000000 +0100
@@ -0,0 +1,2 @@
+
+
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs7810aVFD/vfddisplay.png enigma2-nightly/lib/python/Plugins/Extensions/hs7810aVFD/vfddisplay.png
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs7810aVFD/vfddisplay.png	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs7810aVFD/vfddisplay.png	2012-03-08 20:35:00.000000000 +0100
@@ -0,0 +1,2 @@
+
+
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs7810aVFD/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/hs7810aVFD/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs7810aVFD/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs7810aVFD/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,10 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/hs7810aVFD
+
+SUBDIRS = locale meta
+
+install_PYTHON = \
+	__init__.py \
+	plugin.py
+
+dist_install_DATA = \
+	vfddisplay.png
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs7810aVFD/plugin.py enigma2-nightly/lib/python/Plugins/Extensions/hs7810aVFD/plugin.py
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs7810aVFD/plugin.py	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs7810aVFD/plugin.py	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,409 @@
+# -*- coding: utf-8 -*-
+from Plugins.Plugin import PluginDescriptor
+from ServiceReference import ServiceReference
+from Components.ServiceList import ServiceList
+from enigma import iPlayableService, iServiceInformation, iRecordableService, eTimer, evfd
+from time import localtime, strftime, sleep
+from Components.ServiceEventTracker import ServiceEventTracker
+from Components.Console import Console
+from Tools.Directories import fileExists, resolveFilename, SCOPE_LANGUAGE, SCOPE_PLUGINS
+from os import environ, statvfs
+from Components.ActionMap import ActionMap
+from Components.config import *
+from Components.ConfigList import ConfigList, ConfigListScreen
+from Components.Language import language
+from Components.Sources.StaticText import StaticText
+from Tools.HardwareInfo import HardwareInfo
+from Screens.Screen import Screen
+import gettext
+#Version 141013.1
+stb = HardwareInfo().get_device_name()
+lang = language.getLanguage()
+environ['LANGUAGE'] = lang[:2]
+gettext.bindtextdomain('enigma2', resolveFilename(SCOPE_LANGUAGE))
+gettext.textdomain('enigma2')
+gettext.bindtextdomain('VFD-Icons', '%s%s' % (resolveFilename(SCOPE_PLUGINS), 'SystemPlugins/VFD-Icons/locale/'))
+
+def _(txt):
+	t = gettext.dgettext('VFD-Icons', txt)
+	if t == txt:
+		t = gettext.gettext(txt)
+	return t
+
+def translateBlock(block):
+	for x in TranslationHelper:
+		if block.__contains__(x[0]):
+			block = block.replace(x[0], x[1])
+	return block
+
+try:
+	DisplayType = evfd.getInstance().getVfdType()
+	if DisplayType != 9:
+		DisplayType = None
+except:
+	DisplayType = None
+DisplayTypevfd = DisplayType
+
+if DisplayTypevfd is None:
+	if stb.lower() == 'hs7810a' or stb.lower() == 'hs7819' or stb.lower() == 'hs7119':
+		DisplayType = 9
+	else:
+		DisplayType = None
+
+config.plugins.vfdicon = ConfigSubsection()
+config.plugins.vfdicon.displayshow = ConfigSelection(default = "channel number",
+	choices = [
+		("nothing", _("blank")),
+		("channel number", _("channel number")),
+		("channel", _("channel name")),
+		("channel namenumber", _("channel number and name")),
+		("date", _("date")),
+		("day_date", _("day and date"))
+		])
+config.plugins.vfdicon.stbshow = ConfigSelection(default = "time",
+	choices = [
+		("nothing", _("nothing")),
+		("time", _("time")),
+		("date", _("date")),
+		("day_date", _("day and date"))
+		])
+config.plugins.vfdicon.uppercase = ConfigYesNo(default=True)
+config.plugins.vfdicon.textscroll = ConfigSelection(default = "1",
+	choices = [
+		("0", _("no")),
+		("1", _("once")),
+		("2", _("continuous"))
+		])
+config.plugins.vfdicon.textcenter = ConfigSelection(default = "0",
+	choices = [
+		("0", _("no")),
+		("1", _("yes"))
+		])
+if stb.lower() == 'hs7810a' or stb.lower() == 'hs7819':
+	config.plugins.vfdicon.logoled = ConfigSlider(default=4, limits=(0, 7))
+config.plugins.vfdicon.standbyredled = ConfigSlider(default=3, limits=(0, 7))
+config.plugins.vfdicon.dstandbyredled = ConfigSlider(default=7, limits=(0, 7))
+config.plugins.vfdicon.recredled = ConfigSlider(default=2, limits=(0, 7))
+config.plugins.vfdicon.extMenu = ConfigYesNo(default=True)
+
+class ConfigVFDDisplay(Screen, ConfigListScreen):
+	def __init__(self, session):
+		self.icons_showicons = None
+		Screen.__init__(self, session)
+		self.skinName = ["Setup"]
+		self["key_red"] = StaticText(_("Cancel"))
+		self["key_green"] = StaticText(_("OK"))
+		self["actions"] = ActionMap(["OkCancelActions", "DirectionActions", "SetupActions", "ColorActions"],
+			{
+				'left': self.keyLeft,
+				'down': self.keyDown,
+				'up': self.keyUp,
+				'right': self.keyRight,
+				"cancel": self.cancel,
+				"ok": self.keySave,
+				"green": self.keySave,
+				"red": self.cancel,
+			}, -2)
+		self.cfglist = []
+		ConfigListScreen.__init__(self, self.cfglist, session = session)
+		self.setTitle(_("LED display configuration"))
+		self.createSetup()
+
+	def createSetup(self):
+		self.cfglist = []
+		self.cfglist.append(getConfigListEntry(_("Show on LED display"), config.plugins.vfdicon.displayshow))
+		self.cfglist.append(getConfigListEntry(_("Show on LED display in standby"), config.plugins.vfdicon.stbshow))
+		self.cfglist.append(getConfigListEntry(_("Uppercase letters only"), config.plugins.vfdicon.uppercase))
+		self.cfglist.append(getConfigListEntry(_("Scroll text"), config.plugins.vfdicon.textscroll))
+		self.cfglist.append(getConfigListEntry(_("Center text"), config.plugins.vfdicon.textcenter))
+		if stb.lower() == 'hs7810a' or stb.lower() == 'hs7819':
+			self.cfglist.append(getConfigListEntry(_('Logo brightness'), config.plugins.vfdicon.logoled))
+		self.cfglist.append(getConfigListEntry(_('Stby LED brightness'), config.plugins.vfdicon.standbyredled))
+		self.cfglist.append(getConfigListEntry(_('Rec LED brightness'), config.plugins.vfdicon.recredled))
+		self.cfglist.append(getConfigListEntry(_('Deepstby LED brightness'), config.plugins.vfdicon.dstandbyredled))
+	        self.cfglist.append(getConfigListEntry(_('Show this plugin in plugin menu'), config.plugins.vfdicon.extMenu))
+		self["config"].list = self.cfglist
+		self["config"].l.setList(self.cfglist)
+
+	def newConfig(self):
+		global DisplayType
+		if self["config"].getCurrent()[1] == config.plugins.vfdicon.standbyredled:
+			Console().ePopen("fp_control -l 0 " + str(config.plugins.vfdicon.standbyredled.value))
+		elif self["config"].getCurrent()[1] == config.plugins.vfdicon.dstandbyredled:
+			Console().ePopen("fp_control -l 0 " + str(config.plugins.vfdicon.dstandbyredled.value))
+		elif self["config"].getCurrent()[1] == config.plugins.vfdicon.recredled:
+			Console().ePopen("fp_control -l 0 " + str(config.plugins.vfdicon.recredled.value))
+		elif (stb.lower() == 'hs7810a' or stb.lower() == 'hs7819') and (self["config"].getCurrent()[1] == config.plugins.vfdicon.logoled):
+			Console().ePopen("fp_control -l 1 " + str(config.plugins.vfdicon.logoled.value))
+		print "newConfig", self["config"].getCurrent()
+		self.createSetup()
+
+	def cancel(self):
+		main(self)
+		Console().ePopen("fp_control -l 0 0") # red LED off
+		ConfigListScreen.keyCancel(self)
+
+	def keySave(self):
+		global DisplayType
+		if config.plugins.vfdicon.textscroll.value is not None:
+			evfd.getInstance().vfd_set_SCROLL(int(config.plugins.vfdicon.textscroll.value))
+		else:
+			evfd.getInstance().vfd_set_SCROLL(1)
+		print "[VFD-Icons] set text scroll", config.plugins.vfdicon.textscroll.value
+		if config.plugins.vfdicon.textcenter.value == "1":
+			evfd.getInstance().vfd_set_CENTER(True)
+		else:
+			evfd.getInstance().vfd_set_CENTER(False)
+		print "[VFD-Icons] set text centering", config.plugins.vfdicon.textcenter.value
+		if stb.lower() == 'hs7810a' or stb.lower() == 'hs7819':
+			Console().ePopen("fp_control -l 0 0 -l 1 " + str(config.plugins.vfdicon.logoled.value)) # red LED off, logo on
+		else:
+			Console().ePopen("fp_control -l 0 0") # red LED off
+		main(self)
+		ConfigListScreen.keySave(self)
+
+	def keyLeft(self):
+		self["config"].handleKey(KEY_LEFT)
+		self.newConfig()
+
+	def keyRight(self):
+		self["config"].handleKey(KEY_RIGHT)
+		self.newConfig()
+
+	def keyDown(self):
+		self['config'].instance.moveSelection(self['config'].instance.moveDown)
+		self.newConfig()
+
+	def keyUp(self):
+		self['config'].instance.moveSelection(self['config'].instance.moveUp)
+		self.newConfig()
+
+def opencfg(session, **kwargs):
+		session.open(ConfigVFDDisplay)
+		evfd.getInstance().vfd_write_string( "LED SETUP" )
+
+def VFDdisplaymenu(menuid, **kwargs):
+	if menuid == "system":
+		return [(_("LED display"), opencfg, "vfd_display", 44)]
+	else:
+		return []
+
+class VFDIcons:
+	def __init__(self, session):
+		self.session = session
+		self.onClose = []
+		print '[VFD-Icons] Start'
+		self.record = False
+		self.standby = False
+		self.dolbyAvailable = False
+		self.mp3Available = False
+		self.DTSAvailable = False
+		self.timer = eTimer()
+		self.timer.callback.append(self.timerEvent)
+		self.timer.start(60000, False) # start one minute timer
+		if stb.lower() == 'hs7810a' or stb.lower() == 'hs7819':
+			Console().ePopen("fp_control -l 0 0 -l 1 " + str(config.plugins.vfdicon.logoled.value)) # red LED off, logo on
+		else:
+			Console().ePopen("fp_control -l 0 0") # red LED off
+		global DisplayType
+		print '[VFD-Icons] Hardware displaytype:', DisplayType
+		print '[VFD-Icons] VFD displaytype     :', DisplayTypevfd
+		if DisplayType == 9:
+			self.__event_tracker = ServiceEventTracker(screen = self,eventmap =
+				{
+					iPlayableService.evUpdatedInfo: self.UpdatedInfo,
+					iPlayableService.evUpdatedEventInfo: self.__evUpdatedEventInfo,
+					iPlayableService.evStart: self.__evStart
+				})
+			config.misc.standbyCounter.addNotifier(self.onEnterStandby, initial_call = False)
+			session.nav.record_event.append(self.gotRecordEvent)
+		else:
+			self.__event_tracker = ServiceEventTracker(screen = self,eventmap =
+				{
+					iPlayableService.evStart: self.writeName,
+				})
+		print '[VFD-Icons] Set text scrolling option'
+		if config.plugins.vfdicon.textscroll.value is not None:
+			evfd.getInstance().vfd_set_SCROLL(int(config.plugins.vfdicon.textscroll.value))
+		else:
+			evfd.getInstance().vfd_set_SCROLL(1)
+		print "[VFD-Icons] Set text centering option"
+		if config.plugins.vfdicon.textcenter.value == "1":
+			evfd.getInstance().vfd_set_CENTER(True)
+		else:
+			evfd.getInstance().vfd_set_CENTER(False)
+		print '[VFD-Icons] End initialisation'
+
+	def __evStart(self):
+		print '[VFD-Icons] __evStart'
+#		... and do nothing else
+
+	def __evUpdatedEventInfo(self):
+		print '[VFD-Icons] __evUpdatedEventInfo'
+#		... and do nothing else
+
+	def UpdatedInfo(self):
+		print '[VFD-Icons] __evUpdatedInfo'
+		self.checkAudioTracks()
+		self.writeName()
+
+	def writeName(self):
+		if config.plugins.vfdicon.displayshow.value != "date" and config.plugins.vfdicon.displayshow.value != "day_date":
+			servicename = "    "
+			if config.plugins.vfdicon.displayshow.value != "nothing":
+				service = self.session.nav.getCurrentlyPlayingServiceOrGroup()
+				if service:
+					path = service.getPath()
+					if path:
+						self.play = True
+						servicename = "PLAY"
+						currPlay = self.session.nav.getCurrentService()
+						if currPlay != None and self.mp3Available: # show the MP3 tag
+							servicename = currPlay.info().getInfoString(iServiceInformation.sTagTitle) + " - " + currPlay.info().getInfoString(iServiceInformation.sTagArtist)
+						else: # show the file name
+							self.service = self.session.nav.getCurrentlyPlayingServiceReference()
+							if not self.service is None:
+								service = self.service.toCompareString()
+								servicename = ServiceReference(service).getServiceName().replace('\xc2\x87', '').replace('\xc2\x86', '').ljust(16)
+					else:
+						if config.plugins.vfdicon.displayshow.value == "channel number": #show the channel number
+							servicename = str(service.getChannelNum())
+							if len(servicename) == 1:
+								servicename = '000' + servicename
+							elif len(servicename) == 2:
+								servicename = '00' + servicename
+							elif len(servicename) == 3:
+								servicename = '0' + servicename
+						elif config.plugins.vfdicon.displayshow.value == "channel namenumber": #show the channel number & name
+							servicename = str(service.getChannelNum()) + ' ' + ServiceReference(service).getServiceName()
+						else:
+							servicename = ServiceReference(service).getServiceName() #show the channel name
+			if config.plugins.vfdicon.uppercase.value == True:
+				servicename = servicename.upper()
+			servicename = servicename.replace('  ', ' ')
+			evfd.getInstance().vfd_write_string(servicename[0:63])
+
+	def checkAudioTracks(self):
+		self.dolbyAvailable = False
+		self.mp3Available = False
+		self.DTSAvailable = False
+		service = self.session.nav.getCurrentService()
+		if service:
+			audio = service.audioTracks()
+			if audio:
+				n = audio.getNumberOfTracks()
+				for x in range(n):
+					i = audio.getTrackInfo(x)
+					description = i.getDescription();
+					if description.find("AC3") != -1:
+						self.dolbyAvailable = True
+					if description.find("MP3") != -1:
+						self.mp3Available = True
+					if description.find("DTS") != -1:
+						self.DTSAvailable = True
+
+	def timerEvent(self):
+		if (self.record == True and config.plugins.vfdicon.recredled.value != 0):
+			Console().ePopen("fp_control -l 0 " + str(config.plugins.vfdicon.recredled.value))
+		if (self.standby == True):
+			disp = config.plugins.vfdicon.stbshow.value
+		else:
+			disp = config.plugins.vfdicon.displayshow.value
+		if (disp == "date" or disp == "day_date" or disp == "time"):
+			self.writeDate(disp)
+			
+
+	def gotRecordEvent(self, service, event):
+		if event in (iRecordableService.evEnd, iRecordableService.evStart, None):
+			recs = self.session.nav.getRecordings()
+			nrecs = len(recs)
+			if nrecs > 0: #recording active
+				self.record = True
+				if (config.plugins.vfdicon.recredled.value != 0 and self.standby == False):
+					Console().ePopen("fp_control -l 0 " + str(config.plugins.vfdicon.recredled.value))
+			else: # no recording active
+				self.RecordEnd()
+
+	def RecordEnd(self):
+		if self.record:
+			self.record = False
+			self.session.nav.record_event.remove(self.gotRecordEvent)
+			if (config.plugins.vfdicon.recredled.value != 0 and self.standby == False):
+				Console().ePopen("fp_control -l 0 0")
+
+	def writeDate(self, disp):
+		tm = localtime()
+		length = 4
+		if disp == "day_date":
+			date = strftime("%a", tm)[0:2] + strftime("%d", tm)
+		elif disp == "date":
+			date = strftime("%d%m", tm)
+		else: #TODO: blinking colon
+			date = strftime("%H:%M", tm)
+			length = 5
+		Console().ePopen("fp_control -t " + str(date[0:length]))
+
+	def onLeaveStandby(self):
+		self.standby = False
+		global DisplayType
+		evfd.getInstance().vfd_write_string("    ")
+		if stb.lower() == 'hs7810a' or stb.lower() == 'hs7819':
+			Console().ePopen("fp_control -l 0 0 -l 1 " + str(config.plugins.vfdicon.logoled.value)) # LED off, logo on
+		else:
+			Console().ePopen("fp_control -l 0 0") # LED off
+		print "[VFD-Icons] set LEDs on Leave Standby"
+		self.timerEvent()
+#		self.timer.start(60000, False) # start one minute timer
+
+	def onEnterStandby(self, configElement):
+		from Screens.Standby import inStandby
+		inStandby.onClose.append(self.onLeaveStandby)
+		global DisplayType
+		if config.plugins.vfdicon.standbyredled.value:
+			if stb.lower() == 'hs7810a' or stb.lower() == 'hs7819':
+				Console().ePopen("fp_control -l 0 " + str(config.plugins.vfdicon.standbyredled.value) + "-l 1 0") #Red LED on, logo off
+			else:
+				Console().ePopen("fp_control -l 0 " + str(config.plugins.vfdicon.standbyredled.value)) #Red LED on
+#		self.timer.start(1000, False) # start second timer
+		if config.plugins.vfdicon.stbshow.value == "date" or config.plugins.vfdicon.stbshow.value == "day_date" or config.plugins.vfdicon.stbshow.value == "time":
+			self.writeDate(config.plugins.vfdicon.stbshow.value)
+		else:
+			evfd.getInstance().vfd_write_string("    ")
+		self.standby = True
+		print "[VFD-Icons] set display & icons on Enter Standby"
+
+VFDIconsInstance = None
+
+def main(session, **kwargs):
+	global VFDIconsInstance
+	global DisplayType
+	if VFDIconsInstance is None:
+		VFDIconsInstance = VFDIcons(session)
+	if DisplayType == 9:
+		if config.plugins.vfdicon.displayshow.value == "date" or config.plugins.vfdicon.displayshow.value == "day_date" or config.plugins.vfdicon.displayshow.value == "time":
+			sleep(1)
+			VFDIconsInstance.timerEvent()
+		VFDIconsInstance.UpdatedInfo()
+	else:
+		VFDIconsInstance.writeName()
+
+def Plugins(**kwargs):
+	l = [PluginDescriptor(
+		name = _("LED display"),
+		description = _("LED display configuration"),
+		where = PluginDescriptor.WHERE_MENU,
+		fnc = VFDdisplaymenu),
+		PluginDescriptor(
+		name = _("VFD-Icons"),
+		description = _("LED control for Fortis HS7119/HS7810A/HS7819"),
+		where = PluginDescriptor.WHERE_SESSIONSTART,
+		fnc = main)]
+	if config.plugins.vfdicon.extMenu.value:
+		l.append(PluginDescriptor(
+			name = _("LED display"),
+			description = _("LED display configuration for Fortis HS7119/HS7810A/HS7819"),
+			where = PluginDescriptor.WHERE_PLUGINMENU,
+			icon = _("vfddisplay.png"),
+			fnc = opencfg))
+	return l
+
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs7810aVFD/meta/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/hs7810aVFD/meta/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs7810aVFD/meta/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs7810aVFD/meta/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,3 @@
+installdir = $(datadir)/meta
+
+dist_install_DATA = plugin_vfd-icons.xml
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs7810aVFD/meta/plugin_vfd-icons.xml enigma2-nightly/lib/python/Plugins/Extensions/hs7810aVFD/meta/plugin_vfd-icons.xml
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs7810aVFD/meta/plugin_vfd-icons.xml	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs7810aVFD/meta/plugin_vfd-icons.xml	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,20 @@
+<default>
+	<prerequisites>
+		<hardware type="HS7810A" />
+		<tag type="System" />
+	</prerequisites>
+	<info>
+		<author>Audioniek/Team Ducktales</author>
+		<name>VFD-Icons</name>
+		<packagename>enigma2-plugin-systemplugins-vfd-icons</packagename>
+		<packagetype>public</packagetype> <!-- internal/public , public is default, internal metas are not displayed inside plugin manager -->
+		<shortdescription>Displays text and icons on vfd</shortdescription>
+		<description>Displays text and icons on vfd.
+		</description>
+	</info>
+
+	<files type="package"> <!-- without version, without .ipk -->
+		<file type="package" name="enigma2-plugin-extensions-HS7810aVFD" />
+	</files>
+
+</default>
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs7810aVFD/locale/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/hs7810aVFD/locale/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs7810aVFD/locale/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs7810aVFD/locale/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,3 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/hs7810aVFD/locale
+
+SUBDIRS = nl
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs7810aVFD/locale/nl/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/hs7810aVFD/locale/nl/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs7810aVFD/locale/nl/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs7810aVFD/locale/nl/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,3 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/hs7810aVFD/locale/nl
+
+SUBDIRS = LC_MESSAGES
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs7810aVFD/locale/nl/LC_MESSAGES/Makefile.am enigma2-nightly/lib/python/Plugins/Extensions/hs7810aVFD/locale/nl/LC_MESSAGES/Makefile.am
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs7810aVFD/locale/nl/LC_MESSAGES/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs7810aVFD/locale/nl/LC_MESSAGES/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,10 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/hs7810aVFD/locale/nl/LC_MESSAGES
+
+.po.mo:
+	$(MSGFMT) -o $@ $<
+
+BUILT_SOURCES = VFD-Icons.mo
+
+dist_install_DATA = \
+	VFD-Icons.po \
+	VFD-Icons.mo
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/hs7810aVFD/locale/nl/LC_MESSAGES/VFD-Icons.po enigma2-nightly/lib/python/Plugins/Extensions/hs7810aVFD/locale/nl/LC_MESSAGES/VFD-Icons.po
--- enigma2-nightly.org/lib/python/Plugins/Extensions/hs7810aVFD/locale/nl/LC_MESSAGES/VFD-Icons.po	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/hs7810aVFD/locale/nl/LC_MESSAGES/VFD-Icons.po	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,100 @@
+msgid ""
+msgstr ""
+"Project-Id-Version: VFD-Icons for Fortis HS7810A\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2013-07-17 20:30+0100\n"
+"PO-Revision-Date: 2014-01-29 16:53+0100\n"
+"Last-Translator: Audioniek\n"
+"Language-Team: \n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"X-Generator: Poedit 1.5.4\n"
+"Language: \n"
+"X-Poedit-SourceCharset: UTF-8\n"
+"X-Poedit-Language: Dutch\n"
+"X-Poedit-Country: NETHERLANDS\n"
+
+msgid "channel number"
+msgstr "zendernummer"
+
+msgid "channel name"
+msgstr "zendernaam"
+
+msgid "channel number and name"
+msgstr "zendernummer en -naam"
+
+msgid "date"
+msgstr "datum"
+
+msgid "day and date"
+msgstr "dag en datum"
+
+msgid "blank"
+msgstr "geen"
+
+msgid "nothing"
+msgstr "blanco display"
+
+msgid "time"
+msgstr "tijd"
+
+msgid "time and date"
+msgstr "tijd en datum"
+
+msgid "time, day and date"
+msgstr "tijd, dag en datum"
+
+msgid "once"
+msgstr "een keer"
+
+msgid "continuous"
+msgstr "voortdurend"
+
+msgid "yes"
+msgstr "ja"
+
+msgid "LED display configuration"
+msgstr "LED displayinstellingen"
+
+msgid "Cancel"
+msgstr "Annuleren"
+
+msgid "OK"
+msgstr "Bevestigen"
+
+msgid "Show on LED display"
+msgstr "Info op LED display"
+
+msgid "Show on LED display in standby"
+msgstr "Info op LED display in standby"
+
+msgid "Uppercase letters only"
+msgstr "Alleen hoofdletters"
+
+msgid "Scroll text"
+msgstr "Tekst scrollen"
+
+msgid "Center text"
+msgstr "Tekst centreren"
+
+msgid "Logo brightness"
+msgstr "Logo helderheid"
+
+msgid "Stby LED brightness"
+msgstr "LED helderheid in stby"
+
+msgid "Rec LED brightness"
+msgstr "LED helderheid bij opname"
+
+msgid "Red LED during recording"
+msgstr "Rode LED tijdens opnemen"
+
+msgid "Show this plugin in plugin menu"
+msgstr "Toon deze plugin in het Applicatie-menu"
+
+msgid "LED SETUP"
+msgstr "LED INSTELLINGEN"
+
+msgid "LED display configuration for Fortis HS7119/HS7810A/HS7819"
+msgstr "LED displayinstellingen voor Fortis HS7119/HS7810A/HS7819"
--- /dev/null
+++ enigma2-nightly/lib/python/Plugins/Extensions/spark7162VFD/__init__.py	2012-03-08 20:35:00.000000000 +0100
@@ -0,0 +1,2 @@
+
+
--- /dev/null
+++ enigma2-nightly/lib/python/Plugins/Extensions/spark7162VFD/vfddisplay.png	2012-03-08 20:35:00.000000000 +0100
@@ -0,0 +1,2 @@
+
+
--- /dev/null
+++ enigma2-nightly/lib/python/Plugins/Extensions/spark7162VFD/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,10 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/spark7162VFD
+
+SUBDIRS = locale meta
+
+install_PYTHON = \
+	__init__.py \
+	plugin.py
+
+dist_install_DATA = \
+	vfddisplay.png
--- /dev/null
+++ enigma2-nightly/lib/python/Plugins/Extensions/spark7162VFD/plugin.py	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,821 @@
+# -*- coding: utf-8 -*-
+from Plugins.Plugin import PluginDescriptor
+from ServiceReference import ServiceReference
+from Components.ServiceList import ServiceList
+from enigma import iPlayableService, iServiceInformation, iTimeshiftServicePtr, iRecordableService, eTimer, evfd, eDVBVolumecontrol, iFrontendInformation
+from time import localtime, strftime, sleep
+from Components.ServiceEventTracker import ServiceEventTracker
+from Components.Console import Console
+from Tools.Directories import fileExists, resolveFilename, SCOPE_LANGUAGE, SCOPE_PLUGINS
+from os import environ, statvfs
+from Components.ActionMap import ActionMap
+from Components.config import *
+from Components.ConfigList import ConfigList, ConfigListScreen
+from Components.Language import language
+from Components.Sources.StaticText import StaticText
+from Tools.HardwareInfo import HardwareInfo
+from Screens.Screen import Screen
+import gettext
+#Version 140114.1
+#TODO: test other display type values
+stb = HardwareInfo().get_device_name()
+lang = language.getLanguage()
+environ['LANGUAGE'] = lang[:2]
+gettext.bindtextdomain('enigma2', resolveFilename(SCOPE_LANGUAGE))
+gettext.textdomain('enigma2')
+gettext.bindtextdomain('VFD-Icons', '%s%s' % (resolveFilename(SCOPE_PLUGINS), 'SystemPlugins/VFD-Icons/locale/'))
+
+def _(txt):
+	t = gettext.dgettext('VFD-Icons', txt)
+	if t == txt:
+		t = gettext.gettext(txt)
+	return t
+
+def translateBlock(block):
+	for x in TranslationHelper:
+		if block.__contains__(x[0]):
+			block = block.replace(x[0], x[1])
+	return block
+
+try:
+	DisplayType = evfd.getInstance().getVfdType()
+	if DisplayType != 8:
+		DisplayType = None
+except:
+	DisplayType = None
+DisplayTypevfd = DisplayType
+
+if DisplayTypevfd is None:
+	if stb.lower() == 'spark7162':
+		DisplayType = 8
+#	elif stb.lower() == 'spark':
+#		DisplayType = 4
+	else:
+		DisplayType = None
+
+config.plugins.vfdicon = ConfigSubsection()
+config.plugins.vfdicon.displayshow = ConfigSelection(default = "channel",
+	choices = [
+		("nothing", _("blank")),
+		("channel number", _("channel number")),
+		("channel", _("channel name")),
+		("channel namenumber", _("channel number and name")),
+		("date", _("date")),
+		("day_date", _("day and date"))
+		])
+config.plugins.vfdicon.stbdisplayshow = ConfigSelection(default = "day_date",
+	choices = [
+		("nothing", _("nothing")),
+		("blank", _("time")),
+		("date", _("time and date")),
+		("day_date", _("time, day and date"))
+		])
+config.plugins.vfdicon.contrast = ConfigSlider(default=5, limits=(0, 7))
+config.plugins.vfdicon.stbcontrast = ConfigSlider(default=3, limits=(0, 7))
+config.plugins.vfdicon.uppercase = ConfigYesNo(default=True)
+config.plugins.vfdicon.textscroll = ConfigSelection(default = "1",
+	choices = [
+		("0", _("no")),
+		("1", _("once")),
+		("2", _("continuous"))
+		])
+config.plugins.vfdicon.textcenter = ConfigSelection(default = "0",
+	choices = [
+		("0", _("no")),
+		("1", _("yes"))
+		])
+config.plugins.vfdicon.showicons = ConfigSelection(default = "all",
+	choices = [
+		("none", _("none")),
+		("partial", _("partial")),
+		("all", _("all"))
+		])
+config.plugins.vfdicon.hddicons = ConfigSelection(default = "hdd",
+	choices = [
+		("no", _("signal quality")),
+		("hdd", _("on hdd")),
+		("all mounts", _("on all mounts"))
+		])
+config.plugins.vfdicon.standbyredledon = ConfigYesNo(default=False)
+config.plugins.vfdicon.dstandbyredledon = ConfigYesNo(default=False)
+config.plugins.vfdicon.recredledon = ConfigSelection(default = "0",
+	choices = [
+		("0", _("off")),
+		("1", _("on")),
+		("2", _("blink"))
+		])
+config.plugins.vfdicon.extMenu = ConfigYesNo(default=True)
+
+class ConfigVFDDisplay(Screen, ConfigListScreen):
+	def __init__(self, session):
+		self.icons_showicons = None
+		Screen.__init__(self, session)
+		self.skinName = ["Setup"]
+		self["key_red"] = StaticText(_("Cancel"))
+		self["key_green"] = StaticText(_("OK"))
+		self["actions"] = ActionMap(["OkCancelActions", "DirectionActions", "SetupActions", "ColorActions"],
+			{
+				'left': self.keyLeft,
+				'down': self.keyDown,
+				'up': self.keyUp,
+				'right': self.keyRight,
+				"cancel": self.cancel,
+				"ok": self.keySave,
+				"green": self.keySave,
+				"red": self.cancel,
+			}, -2)
+		self.cfglist = []
+		ConfigListScreen.__init__(self, self.cfglist, session = session)
+		self.setTitle(_("VFD display configuration"))
+		self.createSetup()
+
+	def createSetup(self):
+		self.cfglist = []
+		self.cfglist.append(getConfigListEntry(_("Show on VFD display"), config.plugins.vfdicon.displayshow))
+		self.cfglist.append(getConfigListEntry(_("Show on VFD display in standby"), config.plugins.vfdicon.stbdisplayshow))
+		if DisplayType == 8:
+			self.cfglist.append(getConfigListEntry(_("VFD brightness"), config.plugins.vfdicon.contrast))
+			self.cfglist.append(getConfigListEntry(_("Standby brightness"), config.plugins.vfdicon.stbcontrast))
+		self.cfglist.append(getConfigListEntry(_("Uppercase letters only"), config.plugins.vfdicon.uppercase))
+		self.cfglist.append(getConfigListEntry(_("Scroll text"), config.plugins.vfdicon.textscroll))
+		self.cfglist.append(getConfigListEntry(_("Center text"), config.plugins.vfdicon.textcenter))
+		self.cfglist.append(getConfigListEntry(_("Show icons"), config.plugins.vfdicon.showicons))
+		self.icons_showicons = config.plugins.vfdicon.showicons.value
+		if self.icons_showicons == "all":
+			self.cfglist.append(getConfigListEntry(_("Show HDD icons"), config.plugins.vfdicon.hddicons))
+		self.cfglist.append(getConfigListEntry(_('Red LED on in standby'), config.plugins.vfdicon.standbyredledon))
+		self.cfglist.append(getConfigListEntry(_('Red LED on in deep standby'), config.plugins.vfdicon.dstandbyredledon))
+		self.cfglist.append(getConfigListEntry(_('Red LED during recording'), config.plugins.vfdicon.recredledon))
+	        self.cfglist.append(getConfigListEntry(_('Show this plugin in plugin menu'), config.plugins.vfdicon.extMenu))
+		self["config"].list = self.cfglist
+		self["config"].l.setList(self.cfglist)
+
+	def newConfig(self):
+		global DisplayType
+		if DisplayType == 8:
+			if self["config"].getCurrent()[1] == config.plugins.vfdicon.stbcontrast:
+				Console().ePopen("fp_control -b " + str(config.plugins.vfdicon.stbcontrast.value))
+			else:
+				Console().ePopen("fp_control -b " + str(config.plugins.vfdicon.contrast.value))
+		print "newConfig", self["config"].getCurrent()
+		self.createSetup()
+
+	def cancel(self):
+		main(self)
+		ConfigListScreen.keyCancel(self)
+
+	def keySave(self):
+		global DisplayType
+		if DisplayType == 8:
+			Console().ePopen("fp_control -b " + str(config.plugins.vfdicon.contrast.value))
+			print "[VFD-Icons] set brightness", config.plugins.vfdicon.contrast.value
+		if config.plugins.vfdicon.textscroll.value is not None:
+			evfd.getInstance().vfd_set_SCROLL(int(config.plugins.vfdicon.textscroll.value))
+		else:
+			evfd.getInstance().vfd_set_SCROLL(1)
+		print "[VFD-Icons] set text scroll", config.plugins.vfdicon.textscroll.value
+		if config.plugins.vfdicon.textcenter.value == "1":
+			evfd.getInstance().vfd_set_CENTER(True)
+		else:
+			evfd.getInstance().vfd_set_CENTER(False)
+		print "[VFD-Icons] set text centering", config.plugins.vfdicon.textcenter.value
+		main(self)
+		ConfigListScreen.keySave(self)
+
+	def keyLeft(self):
+		self["config"].handleKey(KEY_LEFT)
+		self.newConfig()
+
+	def keyRight(self):
+		self["config"].handleKey(KEY_RIGHT)
+		self.newConfig()
+
+	def keyDown(self):
+		self['config'].instance.moveSelection(self['config'].instance.moveDown)
+		self.newConfig()
+
+	def keyUp(self):
+		self['config'].instance.moveSelection(self['config'].instance.moveUp)
+		self.newConfig()
+
+def opencfg(session, **kwargs):
+		session.open(ConfigVFDDisplay)
+		evfd.getInstance().vfd_write_string( "VFD SETUP" )
+
+def VFDdisplaymenu(menuid, **kwargs):
+	if menuid == "system":
+		return [(_("VFD display"), opencfg, "vfd_display", 44)]
+	else:
+		return []
+
+
+class VFDIcons:
+	def __init__(self, session):
+		self.session = session
+		self.onClose = []
+		print '[VFD-Icons] Start'
+		self.tuned = False
+		self.play = False
+		self.record = False
+		self.timeshift = False
+		self.disc = 0
+		self.standby = False
+		self.isMuted = False
+		self.usb = 0
+		self.mp3Available = False
+		self.dolbyAvailable = False
+		self.DTSAvailable = False
+		self.timer = eTimer()
+		self.timer.callback.append(self.timerEvent)
+		self.timer.start(60000, False) # start one minute timer
+		Console().ePopen("fp_control -i 46 0")
+		global DisplayType
+		print '[VFD-Icons] Hardware displaytype:', DisplayType
+		print '[VFD-Icons] VFD displaytype     :', DisplayTypevfd
+		if DisplayType == 8:
+			self.__event_tracker = ServiceEventTracker(screen = self,eventmap =
+				{
+					iPlayableService.evUpdatedInfo: self.UpdatedInfo,
+					iPlayableService.evUpdatedEventInfo: self.__evUpdatedEventInfo,
+					iPlayableService.evVideoSizeChanged: self.__evVideoSizeChanged,
+					iPlayableService.evSeekableStatusChanged: self.__evSeekableStatusChanged,
+					iPlayableService.evTunedIn: self.__evTunedIn,
+					iPlayableService.evTuneFailed: self.__evTuneFailed,
+					iPlayableService.evStart: self.__evStart
+				})
+			config.misc.standbyCounter.addNotifier(self.onEnterStandby, initial_call = False)
+			session.nav.record_event.append(self.gotRecordEvent)
+			try:
+				from Plugins.SystemPlugins.Hotplug.plugin import hotplugNotifier
+				hotplugNotifier.append(self.hotplugCB)
+			except:
+				pass
+			self.dir = None
+			self.mount = None
+			self.firstmount = -1
+			global hddUsed
+			hddUsed = -1
+			self.SetMount()
+			if self.mount:
+				self.firstmount = self.mount
+			if self.standby == False:
+				self.displayHddUsed()
+		else:
+			self.__event_tracker = ServiceEventTracker(screen = self,eventmap =
+				{
+					iPlayableService.evStart: self.writeName,
+				})
+		print '[VFD-Icons] Set text scrolling option'
+		if config.plugins.vfdicon.textscroll.value is not None:
+			evfd.getInstance().vfd_set_SCROLL(int(config.plugins.vfdicon.textscroll.value))
+		else:
+			evfd.getInstance().vfd_set_SCROLL(1)
+		print "[VFD_Icons] Set text centering option"
+		if config.plugins.vfdicon.textcenter.value == "1":
+			evfd.getInstance().vfd_set_CENTER(True)
+		else:
+			evfd.getInstance().vfd_set_CENTER(False)
+		print '[VFD-Icons] End initialisation'
+
+	def __evStart(self):
+		print '[VFD-Icons] __evStart'
+		self.__evSeekableStatusChanged()
+
+	def __evUpdatedEventInfo(self):
+		print '[VFD-Icons] __evUpdatedEventInfo'
+#		... and do nothing else
+
+	def UpdatedInfo(self):
+		print '[VFD-Icons] __evUpdatedInfo'
+		self.checkAudioTracks()
+		self.writeName()
+		self.showDTS()
+		if DisplayType == 8:
+			self.showCrypted()
+			self.showDolby()
+			self.showMP3()
+			self.showMute()
+			self.showTuned()
+			self.showMute()
+
+	def writeName(self):
+		if config.plugins.vfdicon.displayshow.value != "date" and config.plugins.vfdicon.displayshow.value != "day_date":
+			servicename = "        "
+			if config.plugins.vfdicon.displayshow.value != "nothing":
+				service = self.session.nav.getCurrentlyPlayingServiceOrGroup()
+				if service:
+					path = service.getPath()
+					if path:
+						self.play = True
+						servicename = "PLAY"
+						currPlay = self.session.nav.getCurrentService()
+						if currPlay != None and self.mp3Available: # show the MP3 tag
+							servicename = currPlay.info().getInfoString(iServiceInformation.sTagTitle) + " - " + currPlay.info().getInfoString(iServiceInformation.sTagArtist)
+							Console().ePopen("fp_control -i 28 1 -i 27 0") #Radio icon on, TV off
+						else: # show the file name
+							self.service = self.session.nav.getCurrentlyPlayingServiceReference()
+							if not self.service is None:
+								service = self.service.toCompareString()
+								servicename = ServiceReference(service).getServiceName().replace('\xc2\x87', '').replace('\xc2\x86', '').ljust(16)
+								Console().ePopen("fp_control -i 27 1 -i 28 0") #TV icon on, Radio off
+						Console().ePopen("fp_control -i 3 1") #play
+						if config.plugins.vfdicon.hddicons.value == "no":
+							self.displayHddUsedOff() #switch off signal strength						
+					else:
+						if config.plugins.vfdicon.displayshow.value == "channel number": #show the channel number
+							servicename = str(service.getChannelNum())
+							if len(servicename) == 1:
+								servicename = '000' + servicename
+							elif len(servicename) == 2:
+								servicename = '00' + servicename
+							elif len(servicename) == 3:
+								servicename = '0' + servicename
+						elif config.plugins.vfdicon.displayshow.value == "channel namenumber": #show the channel number & name
+							servicename = str(service.getChannelNum()) + ' ' + ServiceReference(service).getServiceName()
+						else:
+							servicename = ServiceReference(service).getServiceName() #show the channel name
+						Console().ePopen("fp_control -i 3 0") #play
+						self.play = False
+						#evaluate radio or tv
+						if config.plugins.vfdicon.showicons.value == "all":
+							if config.servicelist.lastmode.value == 'tv':
+								Console().ePopen("fp_control -i 27 1 -i 28 0") #TV icon on, Radio off
+							else:
+								Console().ePopen("fp_control -i 28 1 -i 27 0") #Radio icon on, TV off
+			if config.plugins.vfdicon.uppercase.value is not None:
+				servicename = servicename.upper()
+			evfd.getInstance().vfd_write_string(servicename[0:63])
+
+	def showCrypted(self):
+		if config.plugins.vfdicon.showicons.value != "none":
+			service = self.session.nav.getCurrentService()
+			if service:
+				info = service.info()
+				crypted = info.getInfo(iServiceInformation.sIsCrypted)
+				if crypted == 1:
+					Console().ePopen("fp_control -i 11 1") #Crypt
+				else:
+					Console().ePopen("fp_control -i 11 0")
+
+	def checkAudioTracks(self):
+		self.mp3Available = False
+		self.dolbyAvailable = False
+		self.DTSAvailable = False
+		if config.plugins.vfdicon.showicons.value != "none":
+			service = self.session.nav.getCurrentService()
+			if service:
+				audio = service.audioTracks()
+				if audio:
+					n = audio.getNumberOfTracks()
+					for x in range(n):
+						i = audio.getTrackInfo(x)
+						description = i.getDescription();
+						if description.find("MP3") != -1:
+							self.mp3Available = True
+						if description.find("AC3") != -1:
+							self.dolbyAvailable = True
+						if description.find("DTS") != -1:
+							self.DTSAvailable = True
+
+	def showDolby(self):
+		if self.dolbyAvailable:
+			Console().ePopen("fp_control -i 26 1") #AC-3
+		else:
+			Console().ePopen("fp_control -i 26 0")
+
+	def showMP3(self):
+		if self.mp3Available:
+			Console().ePopen("fp_control -i 25 1") #MP3
+		else:
+			Console().ePopen("fp_control -i 25 0")
+
+	def showDTS(self):
+		if self.DTSAvailable or self.dolbyAvailable:
+			Console().ePopen("fp_control -i 10 1") #Dolby
+		else:
+			Console().ePopen("fp_control -i 10 0")
+
+	def showTuned(self):
+		if config.plugins.vfdicon.showicons.value == "all":
+			if self.tuned == True:
+				service = self.session.nav.getCurrentService()
+				if service is not None and self.play == False:
+					info = service.info()
+					TPdata = info and info.getInfoObject(iServiceInformation.sTransponderData)
+					tunerType = TPdata.get("tuner_type")
+					if tunerType == "DVB-S":
+						Console().ePopen("fp_control -i 42 1 -i 37 0 -i 29 0") #SAT on, TER, Alert off
+						feinfo = service.frontendInfo()
+						FEdata = feinfo and feinfo.getAll(True)
+						tunerNumber = FEdata and FEdata.get("tuner_number")
+						print "[VFD-Icons] Set SAT icon; tuner number", tunerNumber
+						if tunerNumber == 0:
+							Console().ePopen("fp_control -i 44 1 -i 45 0") #dot1 on, dot2 off
+						else:
+							Console().ePopen("fp_control -i 45 1 -i 44 0") #dot1 off, dot2 on
+					elif tunerType == "DVB-T" or tunerType == "DVB-C":
+						print "[VFD-Icons] Set TER icon"
+						Console().ePopen("fp_control -i 37 1 -i 42 0 -i 44 0 -i 45 0 -i 29 0") #TER on, SAT, dot1, dot2, Alert off
+				else:
+					print "[VFD-Icons] No TER or SAT icon"
+					Console().ePopen("fp_control -i 37 0 -i 42 0 -i 44 0 -i 45 0 -i 29 0") #TER, SAT, dot1, dot2, Alert off
+				self.showSignal()
+			else:
+				                             #TER,    SAT,    HD,     Timeshift,Dolby,MP3,    AC-3,   TS_DOT1 TS_CAB off, Alert on
+				Console().ePopen("fp_control -i 37 0 -i 42 0 -i 14 0 -i 43 0 -i 10 0 -i 25 0 -i 26 0 -i 44 0 -i 45 0 -i 29 1")
+
+	def showMute(self):
+		if config.plugins.vfdicon.showicons.value != "none":
+			self.isMuted = eDVBVolumecontrol.getInstance().isMuted()
+			if self.isMuted:
+				Console().ePopen("fp_control -i 8 1") #Mute
+			else:
+				Console().ePopen("fp_control -i 8 0")
+
+	def showSignal(self):
+		if (config.plugins.vfdicon.hddicons.value == "no" and config.plugins.vfdicon.showicons.value == "all" and self.play == False and self.standby == False):
+			Console().ePopen("fp_control -i 30 0") #HDD grid off
+			service = self.session.nav.getCurrentService()
+			if service:
+				info = service.info()
+				feinfo = service.frontendInfo()
+				SQ = feinfo and feinfo.getFrontendInfo(iFrontendInformation.signalQuality)
+#				SQdB = feinfo and feinfo.getFrontendInfo(iFrontendInformation.signalQualitydB)
+#				snr = feinfo and feinfo.getFrontendInfo(iFrontendInformation.snrValue)
+				signal = (SQ * 86) / 0xFFFF
+				self.showSize(signal)
+
+	def showTimer(self):
+		if config.plugins.vfdicon.showicons.value == "all":
+			# check if timers are set
+			next_rec_time = -1
+			next_rec_time = self.session.nav.RecordTimer.getNextRecordingTime()
+			if next_rec_time > 0:
+				Console().ePopen("fp_control -i 33 1") #Timer
+			else:
+				Console().ePopen("fp_control -i 33 0")
+
+	def timerEvent(self):
+		if self.standby == False:
+			self.showSignal()
+			self.showMute() #update mute icon
+			self.showTimer() #update timer icon
+			if (self.record == True and config.plugins.vfdicon.recredledon.value):
+				Console().ePopen("fp_control -l 0 " + str(config.plugins.vfdicon.recredledon.value))
+			if config.plugins.vfdicon.showicons.value == "all":
+				if (self.record == True or self.timeshift == True): # if recording or timeshifting, display a rotating disc
+					self.displayHddUsed() # update HDD display
+					if self.disc == 1:
+						Console().ePopen("fp_control -i 40 0")
+					if self.disc == 2:
+						Console().ePopen("fp_control -i 39 0")
+					if self.disc == 3:
+						Console().ePopen("fp_control -i 38 0 -i 40 1")
+	#				if self.disc == 4:
+	#					Console().ePopen("fp_control -i 40 1")
+					if self.disc == 4:
+						Console().ePopen("fp_control -i 39 1")
+					if self.disc == 5:
+						Console().ePopen("fp_control -i 38 1")
+					self.disc += 1 # indicate next state
+					if self.disc == 6:
+						self.disc = 1
+		if self.record == False and self.timeshift == False:
+	 		if self.standby == False:
+				disptype = config.plugins.vfdicon.displayshow.value
+			else:
+				disptype = config.plugins.vfdicon.stbdisplayshow.value
+			self.writeDate(disptype)
+
+	def __evVideoSizeChanged(self):
+		if config.plugins.vfdicon.showicons.value != "none":
+			service = self.session.nav.getCurrentService()
+			if service:
+				info = service.info()
+				height = info.getInfo(iServiceInformation.sVideoHeight)
+				if config.plugins.vfdicon.showicons.value == "all":
+					if config.plugins.vfdicon.hddicons.value == "no":
+						if height > 720: #set FULL symbol
+							Console().ePopen("fp_control -i 22 1")
+						else:
+							Console().ePopen("fp_control -i 22 0")
+				if height > 576: #set HD icon
+					Console().ePopen("fp_control -i 14 1")
+				else:
+					Console().ePopen("fp_control -i 14 0")
+
+	def __evSeekableStatusChanged(self):
+		if config.plugins.vfdicon.showicons.value == "all":
+			service = self.session.nav.getCurrentService()
+			if service:
+				if self.play == False:
+					ts = service and service.timeshift()
+#					if ts and ts.isTimeshiftEnabled() > 0:
+					if ts and ts.isTimeshiftActive() > 0:
+						self.timeshift = True
+						Console().ePopen("fp_control -i 43 1") #Timeshift
+						self.discOn()
+					else:
+						self.timeshift = False
+						Console().ePopen("fp_control -i 43 0") #Timeshift icon off
+						if self.record == False:
+							self.discOff()
+
+	def gotRecordEvent(self, service, event):
+		if config.plugins.vfdicon.showicons.value != 'none':
+			if event in (iRecordableService.evEnd, iRecordableService.evStart, None):
+				recs = self.session.nav.getRecordings()
+				nrecs = len(recs)
+				if nrecs > 1: #two or more recordings active
+					self.record = True
+					Console().ePopen("fp_control -i 7 1 -i 15 1") #REC1+2 on
+				elif nrecs > 0: #one recording active
+					self.record = True
+					Console().ePopen("fp_control -i 7 1 -i 15 0") #REC1 on, REC2 off
+					self.discOn()
+				else: # no recording active
+					Console().ePopen("fp_control -i 7 0 -i 15 0 -l 0 0") #REC1, REC2 & LED off
+					if self.timeshift == False:
+						self.discOff()
+					self.RecordEnd()
+
+	def RecordEnd(self):
+		if self.record:
+			self.record = False
+			self.session.nav.record_event.remove(self.gotRecordEvent)
+			self.showTimer() #update timer icon
+
+	def discOn(self):
+		if config.plugins.vfdicon.showicons.value == "all":
+			self.timer.stop() # stop minute timer
+			Console().ePopen("fp_control -i 40 1 -i 39 1 -i 38 1 -i 41 1")
+			self.disc = 1 #start rotating the display disc
+			self.timer.start(2000, False) # start two second timer
+
+	def discOff(self):
+		if config.plugins.vfdicon.showicons.value == "all":
+			self.timer.stop() # stop two second timer
+			self.disc = 0 #stop rotating the display disc
+			Console().ePopen("fp_control -i 40 0 -i 39 0 -i 38 0 -i 41 0")
+			self.timer.start(60000, False) # start minute timer
+
+	def writeDate(self, disp):
+		if disp == "date" or disp == "day_date":
+			tm = localtime()
+			if disp == "day_date":
+				date = strftime("%a", tm)[0:2] + strftime(" %d-%m", tm)
+			else:
+				date = strftime("%d-%m-%y", tm)
+			evfd.getInstance().vfd_write_string(date[0:8])
+
+	def __evTunedIn(self):
+		self.tuned = True
+		Console().ePopen("fp_control -i 42 0 -i 37 0 -i 29 0") #SAT, TER + Alert off
+		if config.plugins.vfdicon.hddicons.value == "no":
+			self.displayHddUsedOff()
+
+	def __evTuneFailed(self):
+		self.tuned = False
+		if config.plugins.vfdicon.hddicons.value == "no":
+			self.displayHddUsedOff()
+
+	def onLeaveStandby(self):
+		self.standby = False
+		global DisplayType
+		if DisplayType == 8:
+			evfd.getInstance().vfd_set_brightness(config.plugins.vfdicon.contrast.value)
+			print "[VFD-Icons] set brightness", config.plugins.vfdicon.contrast.value
+			self.timerEvent()
+			Console().ePopen("fp_control -i 36 0 -l 0 0") #Standby & Red LED off
+			if config.plugins.vfdicon.showicons.value == "all":
+				global hddUsed
+				hddUsed = -1 #force hdd display
+				self.displayHddUsed()
+				if self.usb == 1:
+					Console().ePopen("fp_control -i 13 1") #USB
+				else:
+					Console().ePopen("fp_control -i 13 0")
+			print "[VFD-Icons] set icons on Leave Standby"
+
+	def onEnterStandby(self, configElement):
+		from Screens.Standby import inStandby
+		inStandby.onClose.append(self.onLeaveStandby)
+		global DisplayType
+		if DisplayType == 8:
+			Console().ePopen("fp_control -i 46 0") #clear all VFD icons
+			Console().ePopen("fp_control -i 36 1") #Standby
+			if config.plugins.vfdicon.stbdisplayshow.value == "nothing":
+				evfd.getInstance().vfd_set_light(0)
+#				Console().ePopen("fp_control -L 0")
+			else:
+				evfd.getInstance().vfd_set_brightness(config.plugins.vfdicon.stbcontrast.value)
+			print "[VFD-Icons] set standby brightness", config.plugins.vfdicon.stbcontrast.value
+			if config.plugins.vfdicon.standbyredledon.value:
+				Console().ePopen("fp_control -l 0 1") #Red LED on
+		if config.plugins.vfdicon.stbdisplayshow.value == "date" or config.plugins.vfdicon.stbdisplayshow.value == "day_date":
+			self.writeDate(config.plugins.vfdicon.stbdisplayshow.value)
+		else:
+			evfd.getInstance().vfd_clear_string()
+		self.standby = True
+		print "[VFD-Icons] set display & icons on Enter Standby"
+
+	def hotplugCB(self, dev, media_state):
+		if config.plugins.vfdicon.showicons.value == "all":
+			if dev.__contains__('sda') or dev.__contains__('sdb') or dev.__contains__('sdc'):
+#				if media_state == "add" or media_state == "change":
+				if media_state == "add":
+					Console().ePopen("fp_control -i 13 1")
+					self.usb = 1
+					if config.plugins.vfdicon.hddicons.value == "all mounts":
+						self.displayHddUsedOff() # signal hot plug
+						self.mount = None # force remount
+						self.SetMount() # determine mount
+						if self.firstmount == -1 and self.mount:
+								self.firstmount = self.mount
+						self.displayHddUsed() # and display size
+				if media_state == "remove":
+					Console().ePopen("fp_control -i 13 0")
+					self.usb = 0
+					if config.plugins.vfdicon.hddicons.value == "all mounts":
+						if self.firstmount != -1:
+							self.mount = self.firstmount
+						else:
+							self.mount = None
+						if not self.mount:
+							self.displayHddUsedOff()
+						else:
+							self.displayHddUsed() # and display size
+
+	def SetMount(self):
+		if config.plugins.vfdicon.hddicons.value == "all mounts":
+			dir = config.usage.instantrec_path.value[:-1]
+			if dir == "<default":
+				dir = config.usage.default_path.value[:-1]
+			if not self.mount or self.dir != dir:
+				if not self.mount:
+					self.dir = dir
+#					print "[VFD-Icons] SetMount", dir
+					self.mount = self.FindMountDir(dir)
+				if not self.mount:
+					self.mount = self.FindMountDir('/autofs/sdc1')
+				if not self.mount:
+					self.mount = self.FindMountDir('/autofs/sdb1')
+				if not self.mount:
+					self.mount = self.FindMountDir('/autofs/sda1')
+				if not self.mount:
+					self.mount = self.FindMountDir('/media/hdd')
+				if not self.mount:
+					self.mount = self.FindMountDir('/hdd')
+		elif not self.mount:
+			self.mount = self.FindMountDir('/media/hdd')
+			if not self.mount:
+				self.mount = self.FindMountDir('/hdd')
+
+	def FindMountDir(self, dir):
+		mounts = open("/proc/mounts", 'r')
+		for line in mounts:
+			result = line.strip().split()
+			if result[1].startswith(dir):
+				mounts.close()
+				return result[1]
+		mounts.close()
+		return None
+
+	def FindMountDev(self, dev):
+		mounts = open("/proc/mounts", 'r')
+		for line in mounts:
+			result = line.strip().split()
+			if result[0].startswith(dev):
+				mounts.close()
+				return result[1]
+		mounts.close()
+		return None
+
+	def CheckUsed(self):
+		if self.mount:
+			try:
+				f = statvfs(self.mount)
+			except:
+				print "statvfs failed"
+				self.mount = None
+				self.SetMount()
+				if self.mount:
+					try:
+						f = statvfs(self.mount)
+					except:
+						self.mount = None
+#			print "[CheckUsed] Mountpoint       :", self.mount
+#			if self.mount != None:
+#				print "[CheckUsed] Total blocks     :", f.f_blocks
+#				print "[CheckUsed] Free blocks      :", f.f_bavail
+#			if f.f_blocks != 0:
+#				print "[CheckUsed] Free/Used space  :", f.f_bavail * 100 / f.f_blocks, "/", (f.f_blocks - f.f_bavail) * 100 / f.f_blocks, "%"
+		if self.mount:
+			if f.f_blocks == 0:
+				return 0
+			else:
+				return (f.f_blocks - f.f_bavail) * 90 / f.f_blocks
+		else:
+			return 0
+
+	def displayHddUsed(self):
+		global hddUsed
+		if config.plugins.vfdicon.showicons.value == "all":
+			if config.plugins.vfdicon.hddicons.value != "no":
+				if self.mount == None:
+					self.displayHddUsedOff() #HDD display off
+				else:
+					used = self.CheckUsed()
+					if hddUsed != used: # if previous size different 
+						hddUsed = used # save current size
+						Console().ePopen("fp_control -i 30 1") #HDD grid on
+						self.showSize(used) #and show HDD
+						print "[VFD-Icons] HDD mount point:", self.mount, ", used icons:", used/10
+		else:
+			self.displayHddUsedOff()
+
+	def showSize(self, size):
+		if size >= 10:
+			Console().ePopen("fp_control -i 24 1") #HDD1
+		else:
+			Console().ePopen("fp_control -i 24 0")
+		if size >= 20:
+			Console().ePopen("fp_control -i 23 1") #HDD2
+		else:
+			Console().ePopen("fp_control -i 23 0")
+		if size >= 30:
+			Console().ePopen("fp_control -i 21 1") #HDD3
+		else:
+			Console().ePopen("fp_control -i 21 0")
+		if size >= 40:
+			Console().ePopen("fp_control -i 20 1") #HDD4
+		else:
+			Console().ePopen("fp_control -i 20 0")
+		if size >= 50:
+			Console().ePopen("fp_control -i 19 1") #HDD5
+		else:
+			Console().ePopen("fp_control -i 19 0")
+		if size >= 60:
+			Console().ePopen("fp_control -i 18 1") #HDD6
+		else:
+			Console().ePopen("fp_control -i 18 0")
+		if size >= 70:
+			Console().ePopen("fp_control -i 17 1") #HDD7
+		else:
+			Console().ePopen("fp_control -i 17 0")
+		if size >= 80:
+			Console().ePopen("fp_control -i 16 1") #HDD8
+		else:
+			Console().ePopen("fp_control -i 16 0")
+		if config.plugins.vfdicon.hddicons.value != "no":
+			if size < 87:
+				Console().ePopen("fp_control -i 22 0 -i 29 0")
+			else:
+				Console().ePopen("fp_control -i 22 1 -i 29 1") #HDD full (+ Alert)
+
+	def displayHddUsedOff(self): #switch off hdd display
+		Console().ePopen("fp_control -i 16 0 -i 17 0 -i 18 0 -i 19 0 -i 20 0 -i 21 0 -i 23 0 -i 24 0 -i 30 0")
+		if config.plugins.vfdicon.hddicons.value != "no":
+			Console().ePopen("fp_control -i 22 0 -i 29 0") #HDD Full, Alert off
+
+VFDIconsInstance = None
+
+def main(session, **kwargs):
+	global VFDIconsInstance
+	global DisplayType
+	global hddUsed
+	if VFDIconsInstance is None:
+		VFDIconsInstance = VFDIcons(session)
+	if DisplayType == 8:
+		if config.plugins.vfdicon.displayshow.value == "date" or config.plugins.vfdicon.displayshow.value == "day_date":
+			sleep(1)
+			VFDIconsInstance.timerEvent()
+		else:
+			if config.plugins.vfdicon.showicons.value == "none":
+				Console().ePopen("fp_control -i 46 0")		
+			elif config.plugins.vfdicon.hddicons.value != "no":
+				hddUsed = -1
+				VFDIconsInstance.displayHddUsed()
+		VFDIconsInstance.UpdatedInfo()
+	else:
+		VFDIconsInstance.writeName()
+
+def Plugins(**kwargs):
+	l = [PluginDescriptor(
+		name = _("VFD display"),
+		description = _("VFD display configuration"),
+		where = PluginDescriptor.WHERE_MENU,
+		fnc = VFDdisplaymenu),
+		PluginDescriptor(
+		name = _("VFD-Icons"),
+		description = _("VFD-Icons for spark 7162"),
+		where = PluginDescriptor.WHERE_SESSIONSTART,
+		fnc = main)]
+	if config.plugins.vfdicon.extMenu.value:
+		l.append(PluginDescriptor(
+			name = _("VFD display"),
+			description = _("VFD display configuration for Spark 7162"),
+			where = PluginDescriptor.WHERE_PLUGINMENU,
+			icon = _("vfddisplay.png"),
+			fnc = opencfg))
+	return l
--- /dev/null
+++ enigma2-nightly/lib/python/Plugins/Extensions/spark7162VFD/meta/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,3 @@
+installdir = $(datadir)/meta
+
+dist_install_DATA = plugin_vfd-icons.xml
--- /dev/null
+++ enigma2-nightly/lib/python/Plugins/Extensions/spark7162VFD/meta/plugin_vfd-icons.xml	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,20 @@
+<default>
+	<prerequisites>
+		<hardware type="spark7162" />
+		<tag type="System" />
+	</prerequisites>
+	<info>
+		<author>Audioniek/Team Ducktales</author>
+		<name>VFD-Icons</name>
+		<packagename>enigma2-plugin-systemplugins-vfd-icons</packagename>
+		<packagetype>public</packagetype> <!-- internal/public , public is default, internal metas are not displayed inside plugin manager -->
+		<shortdescription>Displays text and icons on vfd</shortdescription>
+		<description>Displays text and icons on vfd.
+		</description>
+	</info>
+
+	<files type="package"> <!-- without version, without .ipk -->
+		<file type="package" name="enigma2-plugin-extensions-sparkVFD" />
+	</files>
+
+</default>
--- /dev/null
+++ enigma2-nightly/lib/python/Plugins/Extensions/spark7162VFD/locale/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,3 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/spark7162VFD/locale
+
+SUBDIRS = nl
--- /dev/null
+++ enigma2-nightly/lib/python/Plugins/Extensions/spark7162VFD/locale/nl/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,3 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/spark7162VFD/locale/nl
+
+SUBDIRS = LC_MESSAGES
--- /dev/null
+++ enigma2-nightly/lib/python/Plugins/Extensions/spark7162VFD/locale/nl/LC_MESSAGES/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,10 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/spark7162VFD/locale/nl/LC_MESSAGES
+
+.po.mo:
+	$(MSGFMT) -o $@ $<
+
+BUILT_SOURCES = VFD-Icons.mo
+
+dist_install_DATA = \
+	VFD-Icons.po \
+	VFD-Icons.mo
--- /dev/null
+++ enigma2-nightly/lib/python/Plugins/Extensions/spark7162VFD/locale/nl/LC_MESSAGES/VFD-Icons.po	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,133 @@
+msgid ""
+msgstr ""
+"Project-Id-Version: VFD-Icons for Spark 7162\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2013-07-17 20:30+0100\n"
+"PO-Revision-Date: 2013-09-18 14:24+0100\n"
+"Last-Translator: Audioniek\n"
+"Language-Team: \n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"X-Generator: Poedit 1.5.4\n"
+"Language: \n"
+"X-Poedit-SourceCharset: UTF-8\n"
+"X-Poedit-Language: Dutch\n"
+"X-Poedit-Country: NETHERLANDS\n"
+
+msgid "channel number"
+msgstr "zendernummer"
+
+msgid "channel name"
+msgstr "zendernaam"
+
+msgid "channel number and name"
+msgstr "zendernummer en -naam"
+
+msgid "date"
+msgstr "datum"
+
+msgid "day and date"
+msgstr "dag en datum"
+
+msgid "blank"
+msgstr "geen"
+
+msgid "nothing"
+msgstr "blanco display"
+
+msgid "time"
+msgstr "tijd"
+
+msgid "time and date"
+msgstr "tijd en datum"
+
+msgid "time, day and date"
+msgstr "tijd, dag en datum"
+
+msgid "once"
+msgstr "een keer"
+
+msgid "continuous"
+msgstr "voortdurend"
+
+msgid "all"
+msgstr "alle"
+
+msgid "partial"
+msgstr "gedeeltelijk"
+
+msgid "none"
+msgstr "geen"
+
+msgid "signal quality"
+msgstr "signaalkwaliteit"
+
+msgid "on hdd"
+msgstr "alleen hdd"
+
+msgid "on all mounts"
+msgstr "alle mounts"
+
+msgid "yes"
+msgstr "ja"
+
+msgid "blink"
+msgstr "knipperen"
+
+msgid "on"
+msgstr "aan"
+
+msgid "VFD display configuration"
+msgstr "VFD displayinstellingen"
+
+msgid "Cancel"
+msgstr "Annuleren"
+
+msgid "OK"
+msgstr "Bevestigen"
+
+msgid "Show on VFD display"
+msgstr "Info op VFD display"
+
+msgid "Show on VFD display in standby"
+msgstr "Info op VFD display in standby"
+
+msgid "VFD brightness"
+msgstr "VFD helderheid"
+
+msgid "Standby brightness"
+msgstr "Helderheid in standby"
+
+msgid "Uppercase letters only"
+msgstr "Alleen hoofdletters"
+
+msgid "Scroll text"
+msgstr "Tekst scrollen"
+
+msgid "Center text"
+msgstr "Tekst centreren"
+
+msgid "Show icons"
+msgstr "Toon iconen"
+
+msgid "Show HDD icons"
+msgstr "Toon HDD-iconen"
+
+msgid "Red LED on in standby"
+msgstr "Rode LED aan in standby"
+
+msgid "Red LED on in deep standby"
+msgstr "Rode LED aan in diepe standby"
+
+msgid "Red LED during recording"
+msgstr "Rode LED tijdens opnemen"
+
+msgid "Show this plugin in plugin menu"
+msgstr "Toon deze plugin in het Applicatie-menu"
+
+msgid "VFD SETUP"
+msgstr "VFD INSTELLINGEN"
+
+msgid "VFD display configuration for Spark 7162"
+msgstr "VFD displayinstellingen voor Spark 7162"
--- /dev/null
+++ enigma2-nightly/lib/python/Plugins/Extensions/sparkVFD/__init__.py	2012-03-08 20:35:00.000000000 +0100
@@ -0,0 +1,2 @@
+
+
--- /dev/null
+++ enigma2-nightly/lib/python/Plugins/Extensions/sparkVFD/vfddisplay.png	2012-03-08 20:35:00.000000000 +0100
@@ -0,0 +1,2 @@
+
+
--- /dev/null
+++ enigma2-nightly/lib/python/Plugins/Extensions/sparkVFD/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,10 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/sparkVFD
+
+SUBDIRS = locale meta
+
+install_PYTHON = \
+	__init__.py \
+	plugin.py
+
+dist_install_DATA = \
+	vfddisplay.png
diff -Nur --exclude=.git --exclude=tuxtxt enigma2-nightly.org/lib/python/Plugins/Extensions/sparkVFD/plugin.py enigma2-nightly/lib/python/Plugins/Extensions/sparkVFD/plugin.py
--- enigma2-nightly.org/lib/python/Plugins/Extensions/sparkVFD/plugin.py	1970-01-01 01:00:00.000000000 +0100
+++ enigma2-nightly/lib/python/Plugins/Extensions/sparkVFD/plugin.py	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,388 @@
+# -*- coding: utf-8 -*-
+from Plugins.Plugin import PluginDescriptor
+from ServiceReference import ServiceReference
+from Components.ServiceList import ServiceList
+from enigma import iPlayableService, iServiceInformation, iTimeshiftServicePtr, iRecordableService, eTimer, evfd, eDVBVolumecontrol, iFrontendInformation
+from time import localtime, strftime, sleep
+from Components.ServiceEventTracker import ServiceEventTracker
+from Components.Console import Console
+from Tools.Directories import fileExists, resolveFilename, SCOPE_LANGUAGE, SCOPE_PLUGINS
+from os import environ, statvfs
+from Components.ActionMap import ActionMap
+from Components.config import *
+from Components.ConfigList import ConfigList, ConfigListScreen
+from Components.Language import language
+from Components.Sources.StaticText import StaticText
+from Tools.HardwareInfo import HardwareInfo
+from Screens.Screen import Screen
+import gettext
+#Version 140722.4
+stb = HardwareInfo().get_device_name()
+lang = language.getLanguage()
+environ['LANGUAGE'] = lang[:2]
+gettext.bindtextdomain('enigma2', resolveFilename(SCOPE_LANGUAGE))
+gettext.textdomain('enigma2')
+gettext.bindtextdomain('VFD-Icons', '%s%s' % (resolveFilename(SCOPE_PLUGINS), 'SystemPlugins/VFD-Icons/locale/'))
+
+def _(txt):
+	t = gettext.dgettext('VFD-Icons', txt)
+	if t == txt:
+		t = gettext.gettext(txt)
+	return t
+
+def translateBlock(block):
+	for x in TranslationHelper:
+		if block.__contains__(x[0]):
+			block = block.replace(x[0], x[1])
+	return block
+
+try:
+	DisplayType = evfd.getInstance().getVfdType()
+	if DisplayType != 4:
+		DisplayType = None
+except:
+	DisplayType = None
+DisplayTypevfd = DisplayType
+
+if DisplayTypevfd is None:
+	if stb.lower() == 'spark':
+		DisplayType = 4
+	else:
+		DisplayType = None
+
+config.plugins.vfdicon = ConfigSubsection()
+config.plugins.vfdicon.displayshow = ConfigSelection(default = "channel_namenumber",
+	choices = [
+		("nothing", _("blank")),
+		("channel_number", _("channel number")),
+		("channel", _("channel name")),
+		("channel_namenumber", _("channel number and name")),
+		("time", _("time")),
+		("date", _("date")),
+		("day_date", _("day and date"))
+		])
+config.plugins.vfdicon.stbdisplayshow = ConfigSelection(default = "time",
+	choices = [
+		("nothing", _("nothing")),
+		("time", _("time")),
+		("date", _("date")),
+		("time_date", _("time and date")),
+		("day_date", _("day and date")),
+		("time_day_date", _("time, day and date"))
+		])
+config.plugins.vfdicon.uppercase = ConfigYesNo(default=True)
+config.plugins.vfdicon.textscroll = ConfigSelection(default = "1",
+	choices = [
+		("0", _("no")),
+		("1", _("once")),
+		("2", _("continuous"))
+		])
+config.plugins.vfdicon.standbyredledon = ConfigYesNo(default=False)
+config.plugins.vfdicon.dstandbyredledon = ConfigYesNo(default=False)
+config.plugins.vfdicon.recredledon = ConfigSelection(default = "2",
+	choices = [
+		("0", _("off")),
+		("1", _("on")),
+		("2", _("blink"))
+		])
+config.plugins.vfdicon.extMenu = ConfigYesNo(default=True)
+
+class ConfigVFDDisplay(Screen, ConfigListScreen):
+	def __init__(self, session):
+		self.icons_showicons = None
+		Screen.__init__(self, session)
+		self.skinName = ["Setup"]
+		self["key_red"] = StaticText(_("Cancel"))
+		self["key_green"] = StaticText(_("OK"))
+		self["actions"] = ActionMap(["OkCancelActions", "DirectionActions", "SetupActions", "ColorActions"],
+			{
+				'left': self.keyLeft,
+				'down': self.keyDown,
+				'up': self.keyUp,
+				'right': self.keyRight,
+				"cancel": self.cancel,
+				"ok": self.keySave,
+				"green": self.keySave,
+				"red": self.cancel,
+			}, -2)
+		self.cfglist = []
+		ConfigListScreen.__init__(self, self.cfglist, session = session)
+		self.setTitle(_("LED display configuration"))
+		self.createSetup()
+
+	def createSetup(self):
+		self.cfglist = []
+		self.cfglist.append(getConfigListEntry(_("Show on LED display"), config.plugins.vfdicon.displayshow))
+		self.cfglist.append(getConfigListEntry(_("Show on LED display in standby"), config.plugins.vfdicon.stbdisplayshow))
+		self.cfglist.append(getConfigListEntry(_("Uppercase letters only"), config.plugins.vfdicon.uppercase))
+		self.cfglist.append(getConfigListEntry(_("Scroll text"), config.plugins.vfdicon.textscroll))
+		self.cfglist.append(getConfigListEntry(_('Red LED on in standby'), config.plugins.vfdicon.standbyredledon))
+		self.cfglist.append(getConfigListEntry(_('Red LED on in deep standby'), config.plugins.vfdicon.dstandbyredledon))
+		self.cfglist.append(getConfigListEntry(_('Red LED during recording'), config.plugins.vfdicon.recredledon))
+	        self.cfglist.append(getConfigListEntry(_('Show this plugin in plugin menu'), config.plugins.vfdicon.extMenu))
+		self["config"].list = self.cfglist
+		self["config"].l.setList(self.cfglist)
+
+	def newConfig(self):
+		global DisplayType
+		print "newConfig", self["config"].getCurrent()
+		self.createSetup()
+
+	def cancel(self):
+		main(self)
+		ConfigListScreen.keyCancel(self)
+
+	def keySave(self):
+		global DisplayType
+		if config.plugins.vfdicon.textscroll.value is not None:
+			evfd.getInstance().vfd_set_SCROLL(int(config.plugins.vfdicon.textscroll.value))
+		else:
+			evfd.getInstance().vfd_set_SCROLL(1)
+		print "[VFD-Icons] set text scroll", config.plugins.vfdicon.textscroll.value
+		main(self)
+		ConfigListScreen.keySave(self)
+
+	def keyLeft(self):
+		self["config"].handleKey(KEY_LEFT)
+		self.newConfig()
+
+	def keyRight(self):
+		self["config"].handleKey(KEY_RIGHT)
+		self.newConfig()
+
+	def keyDown(self):
+		self['config'].instance.moveSelection(self['config'].instance.moveDown)
+		self.newConfig()
+
+	def keyUp(self):
+		self['config'].instance.moveSelection(self['config'].instance.moveUp)
+		self.newConfig()
+
+def opencfg(session, **kwargs):
+		session.open(ConfigVFDDisplay)
+
+def LEDdisplaymenu(menuid, **kwargs):
+	if menuid == "system":
+		return [(_("LED display"), opencfg, "led_display", 44)]
+	else:
+		return []
+
+
+class VFDIcons:
+	def __init__(self, session):
+		self.session = session
+		self.onClose = []
+		print '[VFD-Icons] Start'
+		self.play = False
+		self.record = False
+		self.mp3Available = False
+		self.standby = False
+		self.timer = eTimer()
+		self.timer.callback.append(self.timerEvent)
+		self.timer.start(59998, False) # start one minute timer
+		global DisplayType
+		global dot
+		dot = 0
+		print '[VFD-Icons] Hardware displaytype:', DisplayType
+		print '[VFD-Icons] VFD displaytype     :', DisplayTypevfd
+		if DisplayType == 4:
+			self.__event_tracker = ServiceEventTracker(screen = self,eventmap =
+				{
+					iPlayableService.evUpdatedInfo: self.UpdatedInfo,
+					iPlayableService.evUpdatedEventInfo: self.__evUpdatedEventInfo,
+					iPlayableService.evStart: self.__evStart
+				})
+			config.misc.standbyCounter.addNotifier(self.onEnterStandby, initial_call = False)
+			session.nav.record_event.append(self.gotRecordEvent)
+		else:
+			self.__event_tracker = ServiceEventTracker(screen = self,eventmap =
+				{
+					iPlayableService.evStart: self.writeName,
+				})
+		print '[VFD-Icons] Set text scrolling option'
+		if config.plugins.vfdicon.textscroll.value is not None:
+			evfd.getInstance().vfd_set_SCROLL(int(config.plugins.vfdicon.textscroll.value))
+		else:
+			evfd.getInstance().vfd_set_SCROLL(1)
+		print '[VFD-Icons] End initialisation'
+
+	def __evStart(self):
+		print '[VFD-Icons] __evStart'
+#		... and do nothing else
+
+	def __evUpdatedEventInfo(self):
+		print '[VFD-Icons] __evUpdatedEventInfo'
+#		... and do nothing else
+
+	def UpdatedInfo(self):
+		print '[VFD-Icons] __evUpdatedInfo'
+		self.checkAudioTracks()
+		self.writeName()
+
+	def writeName(self):
+		displayshow = config.plugins.vfdicon.displayshow.value
+		if displayshow != "time" and displayshow != "date" and displayshow != "day_date":
+			servicename = "        "
+			if displayshow != "nothing":
+				service = self.session.nav.getCurrentlyPlayingServiceOrGroup()
+				if service:
+					path = service.getPath()
+					if path:
+						self.play = True
+						servicename = "PLAY"
+						currPlay = self.session.nav.getCurrentService()
+						if currPlay != None and self.mp3Available: # show the MP3 tag
+							servicename = currPlay.info().getInfoString(iServiceInformation.sTagTitle) + " - " + currPlay.info().getInfoString(iServiceInformation.sTagArtist)
+						else: # show the file name
+							self.service = self.session.nav.getCurrentlyPlayingServiceReference()
+							if not self.service is None:
+								service = self.service.toCompareString()
+								servicename = ServiceReference(service).getServiceName().replace('\xc2\x87', '').replace('\xc2\x86', '').ljust(16)
+					else:
+						if displayshow == "channel_number" or displayshow == "channel_namenumber":
+							servicename = str(service.getChannelNum())
+							if len(servicename) == 1:
+								servicename = '000' + servicename
+							elif len(servicename) == 2:
+								servicename = '00' + servicename
+							elif len(servicename) == 3:
+								servicename = '0' + servicename
+						if displayshow == "channel_namenumber":
+							servicename = servicename + ' ' + ServiceReference(service).getServiceName()
+						if displayshow == "channel":
+							servicename = ServiceReference(service).getServiceName()
+			if config.plugins.vfdicon.uppercase.value is not None:
+				servicename = servicename.upper()
+			evfd.getInstance().vfd_write_string(servicename[0:63])
+
+	def checkAudioTracks(self):
+		self.mp3Available = False
+		service = self.session.nav.getCurrentService()
+		if service:
+			audio = service.audioTracks()
+			if audio:
+				n = audio.getNumberOfTracks()
+				for x in range(n):
+					i = audio.getTrackInfo(x)
+					description = i.getDescription();
+					if description.find("MP3") != -1:
+						self.mp3Available = True
+
+	def gotRecordEvent(self, service, event):
+		if event in (iRecordableService.evEnd, iRecordableService.evStart, None):
+			led = config.plugins.vfdicon.recredledon.value
+			recs = self.session.nav.getRecordings()
+			nrecs = len(recs)
+			if nrecs > 0: #one or more recordings active
+				self.record = True
+				if (self.record == True and config.plugins.vfdicon.recredledon.value):
+					Console().ePopen("fp_control -l 0 " + str(config.plugins.vfdicon.recredledon.value))
+					if led == "2":
+						self.timer.stop() # stop minute timer
+						self.timer.start(2000, False) # start two second timer
+					if led == "1":
+						Console().ePopen("fp_control -l 0 1") #Red LED on
+			else:
+				self.timer.stop() # stop 2 second timer
+				if self.standby == True:
+					if config.plugins.vfdicon.standbyredledon.value:
+						Console().ePopen("fp_control -l 0 1") #Red LED on
+					if stbdisplayshow == "time":
+						self.timer.start(1000, False) # start second timer
+				else:
+					Console().ePopen("fp_control -l 0 0") # red LED off
+					self.timer.start(59998, False) # start minute timer
+				self.record = False
+				self.session.nav.record_event.remove(self.gotRecordEvent)
+
+	def timerEvent(self):
+		global dot
+		if self.standby == False:
+			disptype = config.plugins.vfdicon.displayshow.value
+		else:
+			disptype = config.plugins.vfdicon.stbdisplayshow.value
+			if config.plugins.vfdicon.stbdisplayshow.value == "time":
+				if dot == 0:
+					dot = 1
+				else:
+					dot = 0
+		if self.record == True and config.plugins.vfdicon.recredledon.value:
+			Console().ePopen("fp_control -l 0 " + str(config.plugins.vfdicon.recredledon.value))
+		self.writeDate(disptype)
+
+	def writeDate(self, disp):
+		global dot
+		if disp == "time" or disp == "date" or disp == "time_date" or disp == "day_date" or disp == "time_day_date":
+			tm = localtime()
+			time = strftime("%H%M", tm)
+			date = strftime("%a", tm)[0:2] + strftime("%d-%m", tm) # day_date
+			if disp == "time_day_date":
+				date = time + date
+			if disp == "date":
+				date = strftime("%d%m-%y", tm)
+			if disp == "time":
+				date = strftime("%H.%M", tm)
+				if self.standby == True and dot == 0:
+					date = time
+			Console().ePopen("fp_control -t " + date[0:8])
+ 
+	def onLeaveStandby(self):
+		if config.plugins.vfdicon.stbdisplayshow.value == "time":
+			self.timer.stop() # stop second timer
+			self.timer.start(59998, False) # start minute timer
+		self.standby = False
+
+	def onEnterStandby(self, configElement):
+		from Screens.Standby import inStandby
+		inStandby.onClose.append(self.onLeaveStandby)
+		global DisplayType
+		if DisplayType == 4:
+			if config.plugins.vfdicon.standbyredledon.value:
+				Console().ePopen("fp_control -l 0 1") #Red LED on
+			stbdisplayshow = config.plugins.vfdicon.stbdisplayshow.value
+		if stbdisplayshow == "time" and self.record == False:
+			self.timer.stop() # stop minute timer
+			self.timer.start(1000, False) # start second timer
+			dot = 1
+		if stbdisplayshow == "time" or stbdisplayshow == "date" or stbdisplayshow == "day_date":
+			self.writeDate(stbdisplayshow)
+		else:
+			evfd.getInstance().vfd_clear_string()
+		self.standby = True
+		print "[VFD-Icons] set display on Enter Standby"
+
+
+VFDIconsInstance = None
+
+def main(session, **kwargs):
+	global VFDIconsInstance
+	global DisplayType
+	if VFDIconsInstance is None:
+		VFDIconsInstance = VFDIcons(session)
+	if DisplayType == 4:
+		displayshow = config.plugins.vfdicon.displayshow.value
+		if displayshow == "time" or displayshow == "date" or displayshow == "day_date" or displayshow == "time_day_date":
+			sleep(1)
+			VFDIconsInstance.timerEvent()
+		else:
+			VFDIconsInstance.writeName()
+
+def Plugins(**kwargs):
+	l = [PluginDescriptor(
+		name = _("LED display"),
+		description = _("LED display configuration"),
+		where = PluginDescriptor.WHERE_MENU,
+		fnc = LEDdisplaymenu),
+		PluginDescriptor(
+		name = _("VFD-Icons"),
+		description = _("LED display control Spark"),
+		where = PluginDescriptor.WHERE_SESSIONSTART,
+		fnc = main)]
+	if config.plugins.vfdicon.extMenu.value:
+		l.append(PluginDescriptor(
+			name = _("LED display"),
+			description = _("LED display configuration for Spark"),
+			where = PluginDescriptor.WHERE_PLUGINMENU,
+			icon = _("vfddisplay.png"),
+			fnc = opencfg))
+	return l
--- /dev/null
+++ enigma2-nightly/lib/python/Plugins/Extensions/sparkVFD/meta/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,3 @@
+installdir = $(datadir)/meta
+
+dist_install_DATA = plugin_vfd-icons.xml
--- /dev/null
+++ enigma2-nightly/lib/python/Plugins/Extensions/sparkVFD/meta/plugin_vfd-icons.xml	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,20 @@
+<default>
+	<prerequisites>
+		<hardware type="spark" />
+		<tag type="System" />
+	</prerequisites>
+	<info>
+		<author>Audioniek/Team Ducktales</author>
+		<name>VFD-Icons</name>
+		<packagename>enigma2-plugin-systemplugins-vfd-icons</packagename>
+		<packagetype>public</packagetype> <!-- internal/public , public is default, internal metas are not displayed inside plugin manager -->
+		<shortdescription>Displays text and icons on led display</shortdescription>
+		<description>Displays text on LED display.
+		</description>
+	</info>
+
+	<files type="package"> <!-- without version, without .ipk -->
+		<file type="package" name="enigma2-plugin-extensions-sparkVFD" />
+	</files>
+
+</default>
--- /dev/null
+++ enigma2-nightly/lib/python/Plugins/Extensions/sparkVFD/locale/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,3 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/sparkVFD/locale
+
+SUBDIRS = nl
--- /dev/null
+++ enigma2-nightly/lib/python/Plugins/Extensions/sparkVFD/locale/nl/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,3 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/sparkVFD/locale/nl
+
+SUBDIRS = LC_MESSAGES
--- /dev/null
+++ enigma2-nightly/lib/python/Plugins/Extensions/sparkVFD/locale/nl/LC_MESSAGES/Makefile.am	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,10 @@
+installdir = $(pkglibdir)/python/Plugins/Extensions/sparkVFD/locale/nl/LC_MESSAGES
+
+.po.mo:
+	$(MSGFMT) -o $@ $<
+
+BUILT_SOURCES = VFD-Icons.mo
+
+dist_install_DATA = \
+	VFD-Icons.po \
+	VFD-Icons.mo
--- /dev/null
+++ enigma2-nightly/lib/python/Plugins/Extensions/sparkVFD/locale/nl/LC_MESSAGES/VFD-Icons.po	2013-12-18 20:00:00.000000000 +0100
@@ -0,0 +1,106 @@
+msgid ""
+msgstr ""
+"Project-Id-Version: VFD-Icons for Spark\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2013-07-17 20:30+0100\n"
+"PO-Revision-Date: 2013-09-18 14:24+0100\n"
+"Last-Translator: Audioniek\n"
+"Language-Team: \n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"X-Generator: Poedit 1.5.4\n"
+"Language: \n"
+"X-Poedit-SourceCharset: UTF-8\n"
+"X-Poedit-Language: Dutch\n"
+"X-Poedit-Country: NETHERLANDS\n"
+
+msgid "channel number"
+msgstr "zendernummer"
+
+msgid "channel name"
+msgstr "zendernaam"
+
+msgid "channel number and name"
+msgstr "zendernummer en -naam"
+
+msgid "date"
+msgstr "datum"
+
+msgid "day and date"
+msgstr "dag en datum"
+
+msgid "blank"
+msgstr "geen"
+
+msgid "nothing"
+msgstr "blanco display"
+
+msgid "time"
+msgstr "tijd"
+
+msgid "time and date"
+msgstr "tijd en datum"
+
+msgid "time, day and date"
+msgstr "tijd, dag en datum"
+
+msgid "once"
+msgstr "een keer"
+
+msgid "continuous"
+msgstr "voortdurend"
+
+msgid "none"
+msgstr "geen"
+
+msgid "yes"
+msgstr "ja"
+
+msgid "blink"
+msgstr "knipperen"
+
+msgid "on"
+msgstr "aan"
+
+msgid "LED display configuration"
+msgstr "LED-displayinstellingen"
+
+msgid "Cancel"
+msgstr "Annuleren"
+
+msgid "OK"
+msgstr "Bevestigen"
+
+msgid "Show on LED display"
+msgstr "Info op LED display"
+
+msgid "Show on LED display in standby"
+msgstr "Info op LED display in standby"
+
+msgid "Uppercase letters only"
+msgstr "Alleen hoofdletters"
+
+msgid "Scroll text"
+msgstr "Tekst scrollen"
+
+msgid "Center text"
+msgstr "Tekst centreren"
+
+msgid "Red LED on in standby"
+msgstr "Rode LED aan in standby"
+
+msgid "Red LED on in deep standby"
+msgstr "Rode LED aan in diepe standby"
+
+msgid "Red LED during recording"
+msgstr "Rode LED tijdens opnemen"
+
+msgid "Show this plugin in plugin menu"
+msgstr "Toon deze plugin in het Applicatie-menu"
+
+msgid "LED SETUP"
+msgstr "LED INSTELLINGEN"
+
+msgid "LED display configuration for Spark"
+msgstr "LED-displayinstellingen voor Spark"

